@* Параметр типа определяется с помощью директивы @typeparam *@
@typeparam TItem 

<div>
  <div class="mb-3 text-end">
    <div class="btn-group">
      @* Эти две кнопки позволяют пользователю переключаться между двумя представлениями *@
      <button @onclick="@(() => _mode = ViewMode.Grid)" title="Представление сетка" type="button"
              class="btn @(_mode == ViewMode.Grid ? "btn-secondary" : "btn-outline-secondary")">
        <i class="bi bi-grid-fill"></i>
      </button> 
      <button @onclick="@(() => _mode = ViewMode.Table)" title="Табличное представление" type="button"
              class="btn @(_mode == ViewMode.Table ? "btn-secondary" : "btn-outline-secondary")">
        <i class="bi bi-table"></i>
      </button>
    </div>
  </div>
</div>

@if (_mode == ViewMode.Grid)
{
  <div class="grid">
    @foreach (var item in Items)
    {
      @GridTemplate(item)
    }
  </div>
}
else if (_mode == ViewMode.Table)
{
  <table class="table table-striped">
    <thead>
      <tr>
        @HeaderTemplate
      </tr>
    </thead>
    <tbody>
      @foreach (var item in Items)
      {
        <tr>
          @RowTemplate(item)
        </tr>
      }
    </tbody>
  </table>
}

@code {

  private ViewMode _mode = ViewMode.Grid;

  //Определяет параметр GridTemplate
  [Parameter, EditorRequired]
  public RenderFragment<TItem> GridTemplate { get; set; } = default!;

  [Parameter, EditorRequired]
  public RenderFragment HeaderTemplate { get; set; } = default!;

  [Parameter, EditorRequired]
  public RenderFragment<TItem> RowTemplate { get; set; } = default!;

  //Определяет параметр TableTemplate
  // [Parameter, EditorRequired]
  // public RenderFragment TableTemplate { get; set; } = default!;

  private enum ViewMode { Grid, Table }

  /// <summary> Компонент принимает список элементов для отображения </summary>
  [Parameter, EditorRequired]
  public IEnumerable<TItem> Items { get; set; } = default!;

}
