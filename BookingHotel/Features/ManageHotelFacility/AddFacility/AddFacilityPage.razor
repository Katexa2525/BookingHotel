@page "/hotels/{HotelId:guid}/facilities/add-facility"

@inject IMediator Mediator
@inject IMapper Mapper

@attribute [Authorize(Roles = "Administrator, Hotel_owner")]

<PageTitle>Удобства отеля</PageTitle>
<NavigationСhain LastChainName="Add Facility" />

<h3 class="mt-5 mb-4">Форма создания удобств отеля</h3>

@if (_submitSuccessful)
{
  <SuccessAlert Message="Номер отеля был успешно создан!"/>
} 
else if (_errorMessage is not null)
{
  <ErrorAlert Message="@_errorMessage" />
}

@code {
  private bool _submitSuccessful; // поле для отслеживания успешности отправки содержимого формы
  private string? _errorMessage; // поле для хранения сообщения об ошибке, если при отправке что-то пошло не так
  private HotelFacilityForm _hotelFacilityForm = default!;

  [Parameter]
  public Guid HotelId { get; set; }

  protected override async Task OnInitializedAsync()
  {  }

  private async Task SubmitNewHotelFacility(HotelFacilityDto hotelFacilityDto)
  {
    var response = await Mediator.Send(new AddHotelFacilityRequest(Mapper.Map<HotelFacilityCreateWithIdDto>(hotelFacilityDto)));
    if (response is not null && response.hotelFacilityId == Guid.Empty)
    {
      _submitSuccessful = false;
      _errorMessage = AppMessage.HotelFacilityPageLoadTextErrorMessage;
      // Если при сохранении произошла ошибка, вручную вызываю метод StateHasChanged, чтобы обновить
      // пользовательский интерфейс сообщением об ошибке
      StateHasChanged();
      return;
    }
  }

}
