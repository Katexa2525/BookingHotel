@inject NavigationManager NavManager
@inject IMediator Mediator
@inject IMapper Mapper

@if (IsModalOpen)
{
  <div class="modal show d-block" tabindex="-1">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">@ModalTitle</h5>
          <button type="button" class="btn-close" @onclick="CloseModal"></button>
        </div>
        <div class="modal-body" style="max-height: 500px; overflow-y: auto; width: 100%;">
          <table class="table">
            <thead>
              <tr>
                <th>Наименование типа питания</th>
              </tr>
            </thead>
            <tbody>
              @if (_hotelFoods is not null)
              {
                @foreach (var item in _hotelFoods)
                {
                  _food = item;
                  if (_foodTypes != null)
                  {
                    selectedOptionTypeFood = (_foodTypes.FirstOrDefault(p => p.Id.Equals(item.TypeFoodId)) != null) ?
                                              _foodTypes.FirstOrDefault(p => p.Id.Equals(item.TypeFoodId)).Name : "";
                    <tr>
                      <td>
                        <div class="col">
                          <DropdownList Options="@_foodTypes.Select(p=>p.Name).ToList()"
                          SelectedOption="@selectedOptionTypeFood" OnSelectionChanged="@HandleSelection" />
                        </div>
                      </td>
                      <td>
                        <AuthorizeView>
                          @if (context.User.IsInRole("Administrator") || context.User.IsInRole("Hotel_owner"))
                          {
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteRow(item)" />
                          }
                        </AuthorizeView>
                      </td>
                    </tr>
                  }
                }
              }
            </tbody>
          </table>
        </div>
        <AuthorizeView>
          @if (context.User.IsInRole("Administrator") || context.User.IsInRole("Hotel_owner"))
          {
            <div class="modal-footer row">
              <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Large" OnClick="AddRow" />
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Large" OnClick="Save" />
              </MudButtonGroup>
              <div class="row">
                @if (_submitSuccessful)
                {
                  <SuccessAlert Message="Данные по типам питания отеля сохранены!" />
                }
                else if (_errorMessage is not null)
                {
                  <ErrorAlert Message="@_errorMessage" />
                }
              </div>
            </div>
          }
        </AuthorizeView>
      </div>
    </div>
  </div>
}

@code {
  private bool _submitSuccessful = false; // поле для отслеживания успешности отправки содержимого формы
  private string? _errorMessage; // поле для хранения сообщения об ошибке, если при отправке что-то пошло не так
  private List<FoodDto>? _hotelFoods = new List<FoodDto>();
  private FoodDto _food;
  /// <summary> Список для сохранения удаленных записей, чтобы можно было потом удалить при сохранении </summary>
  private List<FoodDto>? _hotelFoodsDel = new List<FoodDto>();
  private List<TypeFoodDto>? _foodTypes = new List<TypeFoodDto>()
  {
    new TypeFoodDto { Id = Guid.Parse("072fc618-8703-437f-9662-5ba97d0ab4f0"), Name = "Завтрак" },
    new TypeFoodDto { Id = Guid.Parse("4d53a1ed-9613-4406-8a31-a411c934e628"), Name = "Полупансион" },
    new TypeFoodDto { Id = Guid.Parse("b2d7509e-c5b3-4936-8deb-26e51052446f"), Name = "Завтрак, обед и ужин" },
    new TypeFoodDto { Id = Guid.Parse("ceb0cba6-80dd-43b0-a9a3-3b9a4165f782"), Name = "Всё включено" },
    new TypeFoodDto { Id = Guid.Parse("e0a5a158-5ef8-414c-896a-49fdf04dc7a4"), Name = "Завтрак полноценный" },
    new TypeFoodDto { Id = Guid.Parse("c9c6eb97-1d58-45d8-879a-9b2cf6c30cbd"), Name = "Без питания" }
  };
  // что выбрано из списка типа питания
  private string selectedOptionTypeFood = "";

  [Parameter, EditorRequired]
  public Guid HotelId { get; set; } = default!;

  [Parameter, EditorRequired]
  public List<FoodDto>? HotelFoods { get; set; } = default!;

  /// <summary>Событие, что окно формы закрыто и надо обработать это событие в родительской форме </summary>
  [Parameter, EditorRequired]
  public EventCallback OnCloseModal { get; set; }

  [Parameter]
  public bool IsModalOpen { get; set; } = false;

  [Parameter, EditorRequired]
  public string ModalTitle { get; set; } = string.Empty;

  // обработка выбора типа питания
  private void HandleSelection(string value)
  {
    selectedOptionTypeFood = value;
    _food.Name = value;
    _food.TypeFoodId = _foodTypes.FirstOrDefault(p => p.Name.Equals(value)).Id;
  }

  protected override async Task OnInitializedAsync()
  {
    _submitSuccessful = false;
  }

  protected override async Task OnParametersSetAsync()
  {
    _hotelFoods = HotelFoods;
    // обновляю данные по Facility по данному отелю
    var response = await Mediator.Send(new GetFoodsRequest(HotelId));
    if (response is not null && response.Foods is not null && response.Foods.Any())
    {
      _hotelFoods = response.Foods;
    }
  }

  private void CloseModal()
  {
    _submitSuccessful = false;
    IsModalOpen = false;
    // оповещаю родительскую форму
    OnCloseModal.InvokeAsync();
  }

  private void AddRow()
  {
    _hotelFoods.Add(new FoodDto
      {
        HotelId = this.HotelId
      });
  }

  private void DeleteRow(FoodDto item)
  {
    _hotelFoodsDel.Add(item);
    _hotelFoods.Remove(item);
  }

  private async Task Save(MouseEventArgs args)
  {
    try
    {
      // добавление записей
      if (_hotelFoods is not null && _hotelFoods.Any())
      {
        foreach (var item in _hotelFoods)
        {
          if (item.Id == Guid.Empty)
          {
            var response = await Mediator.Send(new AddFoodRequest(Mapper.Map<FoodCreateWithIdDto>(item)));
            if (response.foodId == Guid.Empty)
            {
              _submitSuccessful = false;
              _errorMessage = AppMessage.PricePageSaveTextErrorMessage;
              // Если при сохранении произошла ошибка, вручную вызываю метод StateHasChanged, чтобы обновить
              // пользовательский интерфейс сообщением об ошибке
              StateHasChanged();
              return;
            }
            else
              _submitSuccessful = true;
          }
          // проверяю на изменение данных
          else
          {
            if (HotelFoods is not null && HotelFoods.Any())
            {
              var itemEq = HotelFoods.First(p => p.Id.Equals(item.Id));
              // если по Id названия не совпадают, т.е. корректировка была
              if (!item.Name.Equals(itemEq.Name) || !item.TypeFoodId.Equals(itemEq.TypeFoodId))
              {
                // обновляю
                var response = await Mediator.Send(new EditFoodRequest(Mapper.Map<FoodDto>(item)));
                if (!response.IsSuccess)
                {
                  _submitSuccessful = false;
                  _errorMessage = AppMessage.PricePageSaveTextErrorMessage;
                }
                else
                  _submitSuccessful = true;
              }
            }
          }
        }
      }
      // удаление записей
      if (_hotelFoodsDel is not null && _hotelFoodsDel.Any())
      {
        foreach (FoodDto item in _hotelFoodsDel)
        {
          var response = await Mediator.Send(new DeleteFoodRequest(item.Id));
          _submitSuccessful = response.IsSuccess;
        }
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Ошибка: {ex.StackTrace}");
    }
  }
}

