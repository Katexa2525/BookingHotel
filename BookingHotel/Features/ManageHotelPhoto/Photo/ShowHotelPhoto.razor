@inject IMediator Mediator
@inject IMapper Mapper

@if (IsModalOpen)
{
  <div class="modal show d-block" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">@ModalTitle</h5>
          <button type="button" class="btn-close" @onclick="CloseModal"></button>
        </div>
        <div class="modal-body" style="max-height: 500px; overflow-y: auto;">
          <table class="table">
            <tbody>
              @foreach (var item in _photos)
              {
                _photo = item;
                <tr>
                  <td>
                    @if (item is null || (item is not null && item.Photo == null))
                    {
                      <img src="images/NoImage.png" class="card-img-top" />
                    }
                    else
                    {

                      <div class="card bg-dark text-white">
                        <img src="data:image/png;base64,@Convert.ToBase64String(item.Photo)" class="card-img-top" />
                      </div>
                    }
                  </td>
                  <td>
                    @* <InputFile OnChange="HandleFileSelection" multiple accept=".png,.jpg,.jpeg" /> *@
                    <InputFile OnChange="HandleFileSelection" class="form-control" type="file" accept=".png,.jpg,.jpeg" />
                  </td>
                  <td>
                    <AuthorizeView>
                      @if (context.User.IsInRole("Administrator") || context.User.IsInRole("Hotel_owner"))
                      {
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteRow(item)" />
                      }
                    </AuthorizeView>
                  </td>
                </tr>
              }
            </tbody>
          </table>
        </div>
        <AuthorizeView>
          @if (context.User.IsInRole("Administrator") || context.User.IsInRole("Hotel_owner"))
          {
            <div class="modal-footer row">
              <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Large" OnClick="AddRow" />
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Large" OnClick="Save" />
              </MudButtonGroup>
              <div class="row">
                @if (_submitSuccessful)
                {
                  <SuccessAlert Message="Фото номеров отеля сохранены!" />
                }
                else if (_errorMessage is not null)
                {
                  <ErrorAlert Message="@_errorMessage" />
                }
              </div>
            </div>
          }
        </AuthorizeView>
      </div>
    </div>
  </div>
}

@code {
  private bool _submitSuccessful = false; // поле для отслеживания успешности отправки содержимого формы
  private string? _errorMessage; // поле для хранения сообщения об ошибке, если при отправке что-то пошло не так
  private List<HotelPhotoDto>? _photos = new List<HotelPhotoDto>();
  private HotelPhotoDto _photo;
  /// <summary> Список для сохранения удаленных записей, чтобы можно было потом удалить при сохранении </summary>
  private List<HotelPhotoDto>? _photosDel = new List<HotelPhotoDto>();
  /// <summary>Словарь для отслеживания изменения фотки </summary>
  private Dictionary<Guid, bool> dicChangePhoto = new();

  [Parameter, EditorRequired]
  public Guid HotelId { get; set; } = default!;

  [Parameter, EditorRequired]
  public List<HotelPhotoDto>? Photos { get; set; } = default!;

  /// <summary>Событие, что окно формы закрыто и надо обработать это событие в родительской форме </summary>
  [Parameter, EditorRequired]
  public EventCallback OnCloseModal { get; set; }

  [Parameter]
  public bool IsModalOpen { get; set; } = false;

  [Parameter, EditorRequired]
  public string ModalTitle { get; set; } = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    _submitSuccessful = false;
  }

  protected override async Task OnParametersSetAsync()
  {
    dicChangePhoto.Clear();
    _photos = Photos;
    // обновляю данные по Facility по данному отелю
    var response = await Mediator.Send(new GetHotelPhotosRequest(HotelId));
    if (response is not null && response.HotelPhotos is not null && response.HotelPhotos.Any())
    {
      _photos = response.HotelPhotos;
    }
  }

  private void CloseModal()
  {
    _submitSuccessful = false;
    IsModalOpen = false;
    // оповещаю родительскую форму
    OnCloseModal.InvokeAsync();
  }

  private void AddRow()
  {
    _photos.Add(new HotelPhotoDto { HotelId = this.HotelId });
  }

  private void DeleteRow(HotelPhotoDto item)
  {
    _photosDel.Add(item);
    _photos.Remove(item);
  }

  private async Task Save(MouseEventArgs args)
  {
    try
    {
      // добавление записей
      if (_photos is not null && _photos.Any())
      {
        foreach (HotelPhotoDto item in _photos)
        {
          if (item.Id == Guid.Empty)
          {
            var response = await Mediator.Send(new AddHotelPhotoRequest(Mapper.Map<HotelPhotoCreateWithIdDto>(item)));
            if (response.hotelPhotoId == Guid.Empty)
            {
              _submitSuccessful = false;
              _errorMessage = AppMessage.HotelPhotoPageSaveTextErrorMessage;
              // Если при сохранении произошла ошибка, вручную вызываю метод StateHasChanged, чтобы обновить
              // пользовательский интерфейс сообщением об ошибке
              StateHasChanged();
              return;
            }
            else
              _submitSuccessful = true;
          }
          // проверяю на изменение данных
          else
          {
            if (Photos is not null && Photos.Any())
            {
              if (dicChangePhoto.ContainsKey(item.Id))
              {
                // обновляю
                var response = await Mediator.Send(new EditHotelPhotoRequest(Mapper.Map<HotelPhotoDto>(item)));
                if (!response.IsSuccess)
                {
                  _submitSuccessful = false;
                  _errorMessage = AppMessage.HotelPhotoPageSaveTextErrorMessage;
                }
                else
                {
                  _submitSuccessful = true;
                }
              }
            }
          }
        }
      }
      // удаление записей
      if (_photosDel is not null && _photosDel.Any())
      {
        foreach (HotelPhotoDto item in _photosDel)
        {
          var response = await Mediator.Send(new DeleteHotelPhotoRequest(item.Id));
          _submitSuccessful = response.IsSuccess;
        }
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Ошибка: {ex.StackTrace}");
    }
  }

  private async Task HandleFileSelection(InputFileChangeEventArgs args)
  {
    var file = args.File;
    using var stream = file.OpenReadStream();
    using var memoryStream = new MemoryStream();
    await stream.CopyToAsync(memoryStream);
    byte[] imageData = memoryStream.ToArray();
    _photo.Photo = imageData;
    // добавляю в словарь id фото, которое изменено
    dicChangePhoto.Add(_photo.Id, true);
  }
}

