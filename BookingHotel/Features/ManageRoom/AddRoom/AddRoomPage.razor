@page "/hotels/{HotelId:guid}/rooms/add-room"

@inject IMediator Mediator
@inject IMapper Mapper

@attribute [Authorize(Roles = "Administrator, Hotel_owner")]

<PageTitle>Создание новой записи номера отеля</PageTitle>

<NavigationСhain LastChainName="Add Room" />

<h3 class="mt-5 mb-4">Форма создания номера отеля</h3>

@if (_submitSuccessful)
{
  <SuccessAlert Message="Номер отеля был успешно создан!"/>
} 
else if (_errorMessage is not null)
{
  <ErrorAlert Message="@_errorMessage" />
}

<!--
Исходный компонент EditForm заменен новым компонентом RoomForm.
Директива Blazor @ref используется для захвата ссылки на компонент. 
Она будет применяться для вызова метода ResetForm. 
Также предоставлен обработчик OnSubmit компонента RoomForm
-->
<RoomForm @ref="_roomForm" HotelId="HotelId" RoomTypes="_allRoomTypes" OnSubmit="SubmitNewRoom" TextButtonCancel="Отмена"/>

@code {
  private bool _submitSuccessful; // поле для отслеживания успешности отправки содержимого формы
  private string? _errorMessage; // поле для хранения сообщения об ошибке, если при отправке что-то пошло не так
  private RoomForm _roomForm = default!;
  private List<RoomTypeDto>? _allRoomTypes = new List<RoomTypeDto>();

  [Parameter]
  public Guid HotelId { get; set; }

  protected override async Task OnInitializedAsync()
  {
    // запрос на получения всех типов номеров
    var responseRoomTypes = await Mediator.Send(new GetRoomTypesRequest());
    if (responseRoomTypes is not null && responseRoomTypes.RoomTypes is not null)
    {
      _allRoomTypes = responseRoomTypes.RoomTypes.Select(p => new RoomTypeDto { Id = p.Id, Name = p.Name })
                                                 .OrderBy(p => p.Name).ToList();
      _allRoomTypes.Add(new RoomTypeDto { Id = Guid.Empty, Name = string.Empty });
    }
  }

  private async Task SubmitNewRoom(RoomDto roomDto, IBrowserFile? image)
  {
    var response = await Mediator.Send(new AddRoomRequest(Mapper.Map<RoomCreateDto>(roomDto)));
    if (response is not null && response.roomId == Guid.Empty)
    {
      _submitSuccessful = false;
      _errorMessage = AppMessage.RoomPageLoadTextErrorMessage;
      // Если при сохранении отеля произошла ошибка, вручную вызываю метод StateHasChanged, чтобы обновить
      // пользовательский интерфейс сообщением об ошибке
      StateHasChanged();
      return;
    }

    if (image is null)
    {
      _submitSuccessful = true;
      // Если номер отеля был успешно сохранён и для нее не было изображения,сбрасываем RoomForm через ссылку, захваченную в поле _roomForm
      _roomForm.ResetForm();
      // Показывает ручной вызов StateHasChanged для запуска обновления пользовательского интерфейса
      StateHasChanged();
      return;
    }

    _submitSuccessful = await ProcessImage(response.roomId, image);
    if (_submitSuccessful)
    {
      _roomForm.ResetForm();
    }

    // Если мы здесь, значит, есть попытка загрузить изображение отеля.
    // Запускаю обновление пользовательского интерфейса, чтобы показать результат этой операции
    StateHasChanged();
  }

  private async Task<bool> ProcessImage(Guid roomId, IBrowserFile roomImage)
  {
    var imageUploadResponse = await Mediator.Send(new UploadRoomImageRequest(roomId, roomImage));

    if (string.IsNullOrWhiteSpace(imageUploadResponse.ImageName))
    {
      _errorMessage = AppMessage.AddRoomPageSaveImageTextErrorMessage;
      return false;
    }
    return true;
  }


}
