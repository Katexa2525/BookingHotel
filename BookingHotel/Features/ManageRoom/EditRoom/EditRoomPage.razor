@page "/hotels/{HotelId:guid}/rooms/{RoomId:guid}"
@using Application.Enums

@inject IMediator Mediator

<PageTitle>Редактирование номера</PageTitle>

<NavigationСhain LastChainName="Edit Room" />

@if (_isLoading)
{
  <p>Загрузка номера отеля...</p>
}
else
{
  <h3 class="mt-2 mb-1">@_room.RoomType?.Name</h3>

  @if (_submitSuccessful)
  {
    <SuccessAlert Message="Номер отеля был успешно отредактирован!" />
  }
  else if (_errorMessage is not null)
  {
    <ErrorAlert Message="@_errorMessage" />
  }

  <RoomForm Room="_room" HotelId="HotelId" RoomTypes="_allRoomTypes" TextButtonCancel="Отмена"
            OnSubmit="SubmitEditRoom" OnHandleCloseSubordinateForm="HandleCloseSubordinateForm" />
}

@code {
  private bool _isLoading;
  private bool _submitSuccessful; // поле для отслеживания успешности отправки содержимого формы
  private string? _errorMessage; // поле для хранения сообщения об ошибке, если при отправке что-то пошло не так
  private RoomDto _room = new RoomDto();
  private List<RoomFacilityDto> _roomFacility = new List<RoomFacilityDto>();
  private List<RoomTypeDto>? _allRoomTypes = new List<RoomTypeDto>();

  [Parameter]
  public Guid HotelId { get; set; }

  [Parameter]
  public Guid RoomId { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _isLoading = true;

    var response = await Mediator.Send(new GetRoomRequest(RoomId));

    if (response is not null)
    {
      _room = response.Room;
    }
    else
    {
      _errorMessage = AppMessage.RoomPageLoadTextErrorMessage;
    }

    // запрос на получения всех типов номеров
    var responseRoomTypes = await Mediator.Send(new GetRoomTypesRequest());
    if (responseRoomTypes is not null)
    {
      _allRoomTypes = responseRoomTypes.RoomTypes.Select(p => new RoomTypeDto { Id = p.Id, Name = p.Name })
                                                 .OrderBy(p=>p.Name).ToList();
    }

    // после загрузки отеля устанавливаю в false
    _isLoading = false;
  }

  private async Task SubmitEditRoom(RoomDto roomDto, IBrowserFile? image)
  {
    var response = await Mediator.Send(new EditRoomRequest(roomDto));

    if (!response.IsSuccess)
    {
      _submitSuccessful = false;
      _errorMessage = AppMessage.RoomPageSaveTextErrorMessage;
    }
    else
    {
      _room = roomDto;
      _submitSuccessful = true;
    }

    // Если пользователь обновил изображение тропы, вызывается ProcessImage для загрузки нового изображения
    if (roomDto.ImageAction == ImageAction.Add)
      _submitSuccessful = await ProcessImage(roomDto.Id, image!);

    // Если пользователь удалил изображение, свойство Image очищается
    if (roomDto.ImageAction == ImageAction.Remove)
      _room.MainPhoto = "";

    // Метод StateHasChanged вызывается для отрисовки любых обновлений пользовательского интерфейса
    StateHasChanged();
  }

  private async Task<bool> ProcessImage(Guid roomId, IBrowserFile roomImage)
  {
    var imageUploadResponse = await Mediator.Send(new UploadRoomImageRequest(roomId, roomImage));
    if (string.IsNullOrWhiteSpace(imageUploadResponse.ImageName))
    {
      _errorMessage = AppMessage.AddRoomPageSaveImageTextErrorMessage;
      return false;
    }
    // Если было выбрано новое изображение, обновляем свойство Image, указав новое имя файла
    _room.MainPhoto = imageUploadResponse.ImageName;
    return true;
  }

  private async Task HandleCloseSubordinateForm(bool isClosed)
  {
    // обновляю данные на странице
    if (isClosed)
    {
      var response = await Mediator.Send(new GetRoomRequest(RoomId));

      if (response is not null)
      {
        _room = response.Room;
      }
    }
  }

}
