@inject NavigationManager NavManager
@inject IMediator Mediator

<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
  <FluentValidationValidator />

  <div class="card card-brand mb-2 shadow">
    <div class="card-body">
      <div class="row">
        <div class="col-6">


          @if (_room == null || (_room != null && _room.RoomPhotos == null) || (_room != null && _room.RoomPhotos != null && !_room.RoomPhotos.Any()))
          {
            <img src="images/NoImage.png" class="card-img-top" />
          }
          else
          {
            <PhotoCarousel Photos="_room.RoomPhotos.Select(p => p.Photo).ToList()" />
          }

          <AuthorizeView Context="authContext">
            @if (authContext.User.IsInRole("Administrator") || authContext.User.IsInRole("Hotel_owner"))
            {
              <div class="mt-5 mb-5">
                <button @onclick="ShowPrices">
                  <img src="images/price.png" alt="Цены" width="50" height="50">
                </button>

                <button @onclick="ShowFacilities">
                  <img src="images/Facility.png" alt="Удобства" width="50" height="50">
                </button>

                <button @onclick="ShowPhoto">
                  <img src="images/camera.png" alt="Фото" width="50" height="50">
                </button>
              </div>

              <div class="row mt-5 mb-5">
                <div class="col text-right">
                  <SaveButton TextButtonAccept="Сохранить" />
                </div>
              </div>
            }
          </AuthorizeView>
        </div>

        <div class="col-6">

          <FormFieldSet Width="col">
            <label for="roomType" class="font-weight-bold text-secondary">Тип номера</label>
            <DropdownList Options="@RoomTypes.Select(p=>p.Name).ToList()"
                          SelectedOption="@selectedOptionType" OnSelectionChanged="@HandleSelection" />
            <ValidationMessage For="@(() => _room.RoomTypeId )" />
          </FormFieldSet>

          <FormFieldSet Width="col">
            <label for="roomDescription" class="font-weight-bold text-secondary">Описание номера</label>
            <InputTextArea @bind-Value="_room.Description" rows="6" class="form-control" id="roomDescription" />
            <ValidationMessage For="@(() => _room.Description )" />
          </FormFieldSet>

          <div class="row">
            <div class="col-6">
              <FormFieldSet Width="col">
                <label for="roomPeopleNumber" class="font-weight-bold text-secondary">Кол-во человек</label>
                <InputNumber @bind-Value="_room.PeopleNumber" rows="6" class="form-control" id="roomPeopleNumber" />
                <ValidationMessage For="@(() => _room.PeopleNumber )" />
              </FormFieldSet>
            </div>
            <div class="col-6">
              <FormFieldSet Width="col">
                <label for="roomSquare" class="font-weight-bold text-secondary">Площадь, м2</label>
                <InputNumber @bind-Value="_room.Square" class="form-control" id="roomSquare" />
              </FormFieldSet>
            </div>
          </div>

          <div class="card card-brand mb-4 mt-4">
            <div class="card-body">
              <FormFieldSet Width="col">
                <label for="roomFacilities" class="font-weight-bold text-secondary">Убодства в номере</label>
                @* <MultiSelectList T="string" Options="@optionsFacilities" SelectedOptions="@selectedOptionsFacilities" OnSelectionChanged="@HandleSelection" />
                        <p>Выбрано: @string.Join(", ", selectedOptionsFacilities)</p> *@

                <div class="row align-items-start">
                  <div class="col-sm-8">
                    <div class="d-flex">
                      @if (_room is not null && _room.RoomFacilities is not null && _room.RoomFacilities.Any())
                      {
                        foreach (var item in @_room.RoomFacilities)
                        {
                          <h6 class="m-3">@item.Name</h6>
                        }
                      }
                    </div>
                  </div>
                </div>
              </FormFieldSet>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>

  @if (!isModalRoomPriceOpen && !isModalRoomPhotoOpen && isModalRoomFacilityOpen)
  {
    <ShowRoomFacility IsModalOpen="@isModalRoomFacilityOpen" RoomFacilities="@_room.RoomFacilities?.ToList()" RoomId="@Room.Id"
                      OnCloseModal="CloseModalFacilityHandlerAsync" ModalTitle="Удобства и услуги номера отеля" />
  }

  @if (!isModalRoomFacilityOpen && !isModalRoomPhotoOpen && isModalRoomPriceOpen)
  {
    <ShowRoomPrice IsModalOpen="@isModalRoomPriceOpen" RoomPrices="@_room.Prices?.ToList()" RoomId="@Room.Id"
                   OnCloseModal="CloseModalPriceHandlerAsync" ModalTitle="Цены номера отеля" />
  }

  @if (!isModalRoomFacilityOpen && !isModalRoomPriceOpen && isModalRoomPhotoOpen)
  {
    <ShowRoomPhoto IsModalOpen="@isModalRoomPhotoOpen" Photos="@_room.RoomPhotos?.ToList()" RoomId="@Room.Id"
                   OnCloseModal="CloseModalPhotoHandlerAsync" ModalTitle="Фото номера отеля" />
  }

</EditForm>

@code {
  private EditContext _editContext = default!;
  private RoomDto _room = new RoomDto();
  private IBrowserFile? _roomImage;
  private bool isModalRoomFacilityOpen = false;
  private bool isModalRoomPriceOpen = false;
  private bool isModalRoomPhotoOpen = false;

  private List<string> optionsFacilities = new() { "Wi-Fi", "Детектор дыма", "Телевизор", "Кондиционер", "Полотенца" };
  private List<string> selectedOptionsFacilities = new();

  //private List<string> optionsType = new() { "Студия", "Люкс Гранд Премиум", "Стандарт Бизнес (четырехместный)", "Номер стандарт", "Стандарт Бизнес" };
  private string selectedOptionType = "";

  [Parameter, EditorRequired]
  public Guid HotelId { get; set; } = default!;

  /// <summary> Параметр передает существующий номер на форму </summary>
  [Parameter]
  public RoomDto? Room { get; set; }

  /// <summary> Параметр передает коллекцию типов номеров на форму </summary>
  [Parameter]
  public List<RoomTypeDto>? RoomTypes { get; set; }

  [Parameter]
  public string TextButtonCancel { get; set; } = "Отмена";

  /// <summary> Свойство для возврата в родительскую форму EditRoomPage или AddRoomPage признака, что форма закрыта </summary>
  [Parameter]
  public EventCallback<bool> OnHandleCloseSubordinateForm { get; set; }

  /// <summary> Параметр OnSubmit определяет событие, которое передает введенные в форму данные обработчику, определяемому компонентом-потребителем </summary>
  [Parameter, EditorRequired]
  public Func<RoomDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;

  private void HandleSelection(string value)
  {
    selectedOptionType = value;
  }

  private void HandleSelection(List<string> values)
  {
    selectedOptionsFacilities = values;
  }

  public void ResetForm()
  {
    _room = new RoomDto();
    _editContext = new EditContext(_room);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    _roomImage = null;
  }

  // Метод OnInitialized заменяется методом OnParametersSet. Он будет вызываться всякий раз
  // при обновлении объекта, передаваемого через параметр Hotel.Это нужно, чтобы можно было
  // обновить или удалить изображение после запуска обработчика SubmitEditHotel в EditHotelPage
  protected override void OnParametersSet()
  {
    // создаю новый EditContext для модели отеля
    _editContext = new EditContext(_room);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());

    if (Room is not null)
    {
      _room = Room;
    }

    // выбираю тип номера, который установлен по номеру
    if (RoomTypes is not null && RoomTypes.Any() && Room is not null)
    {
      RoomTypes.Add(new RoomTypeDto() { Id = Guid.NewGuid(), Name = string.Empty });
      selectedOptionType = RoomTypes.First(p => p.Id == Room.RoomTypeId).Name;
    }
  }

  /// <summary>
  /// Обработчик события OnValidSubmit из EditForm вызовет событие OnSubmit.
  /// Это позволит обработчику решить, как сохранить данные формы
  /// </summary>
  private async Task SubmitForm()
  {
    // если добавляю номер
    if (_room.Id == Guid.Empty)
    {
      // обрабатываю выбор типа номера
      Guid? roomTypeId = RoomTypes?.First(p => p.Name.Equals(selectedOptionType)).Id;
      _room.RoomTypeId = roomTypeId.Value;
      _room.HotelId = HotelId;
      //_room.MainPhoto = _roomImage is null ? ""
    }
    await OnSubmit(_room, _roomImage);
  }

  private void LoadRoomImage(InputFileChangeEventArgs e)
  {
    _roomImage = e.File;
    _room.ImageAction = ImageAction.Add; //Задаю ImageAction для добавления при выборе изображения
  }

  /// <summary>
  /// Этот метод вызывается при нажатии кнопки «Удалить изображение». Так сбрасываеncz свойство Image, инициируя отображение компонента InputFile,
  /// а также помечаем изображение, которое нужно удалить на сервере
  /// </summary>
  private void RemoveRoomImage()
  {
    _room.MainPhoto = null;
    _room.ImageAction = ImageAction.Remove;
  }

  private void ShowFacilities(MouseEventArgs args)
  {
    //NavManager.NavigateTo($"/hotels/{Room.HotelId}/rooms/{Room.Id}/facilities");
    isModalRoomFacilityOpen = true;
  }

  private void ShowPhoto(MouseEventArgs args)
  {
    //NavManager.NavigateTo($"/hotels/{Room.HotelId}/rooms/{Room.Id}/photo");
    isModalRoomPhotoOpen = true;
  }

  private void ShowPrices(MouseEventArgs args)
  {
    //NavManager.NavigateTo($"/hotels/{Room.HotelId}/rooms/{Room.Id}/prices");
    isModalRoomPriceOpen = true;
  }

  private async Task CloseModalFacilityHandlerAsync()
  {
    // чтобы модальное окно закрылось
    isModalRoomFacilityOpen = false;
    await OnHandleCloseSubordinateForm.InvokeAsync(true);
  }

  private async Task CloseModalPriceHandlerAsync()
  {
    isModalRoomPriceOpen = false;
    await OnHandleCloseSubordinateForm.InvokeAsync(true);
  }

  private async Task CloseModalPhotoHandlerAsync()
  {
    isModalRoomPhotoOpen = false;
    // обновляю данные на странице
    await OnHandleCloseSubordinateForm.InvokeAsync(true);
  }
}
