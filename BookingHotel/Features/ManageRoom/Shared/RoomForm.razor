@using BookingHotel.Validation

<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
  <FluentValidationValidator />

  <div class="card card-brand mb-4 shadow">
    <div class="card-body">
      <div class="row">
        <div class="col-4">
          <div>
            <!--Если у отеля нет изображения, выполняю отрисовку компонента InputFile, позволяя пользователю выбрать его-->
            <img src="images/NoImage.png" class="card-img-top" />
            @* <InputFile class="form-control-file mt-1" id="roomImage" accept=".png,.jpg,.jpeg" /> *@
          </div>

          <div class="mt-5 mb-5">
            <button @onclick="ShowPrices">
              <img src="images/price.png" alt="Цены" width="50" height="50">
            </button>

            <button @onclick="ShowFacilities">
              <img src="images/Facility.png" alt="Удобства" width="50" height="50">
            </button>

            <button @onclick="ShowPhoto">
              <img src="images/camera.png" alt="Фото" width="50" height="50">
            </button>
          </div>

          <div class="row mt-5 mb-5">
            <div class="col text-right">
              <SaveButton TextButtonAccept="Сохранить"/>

              <button class="btn btn-outline-secondary" type="button"
                      onclick="@(() => _room=new RoomDto())">
                @TextButtonCancel
              </button>
            </div>
          </div>
        </div>




        <div class="col-8">

          <FormFieldSet Width="col">
            @* <label for="roomType" class="font-weight-bold text-secondary">Тип номера</label> *@
            @* <InputText @bind-Value="_room.RoomTypeId" class="form-control" id="roomType" /> *@
            <DropdownList Options="@optionsType" SelectedOption="@selectedOptionType" OnSelectionChanged="@HandleSelection" />
            @* <p>Выбрано: @selectedOption</p> *@
            <ValidationMessage For="@(() => _room.RoomTypeId )" />
          </FormFieldSet>

          <FormFieldSet Width="col">
            <label for="roomDescription" class="font-weight-bold text-secondary">Описание номера</label>
            <InputTextArea @bind-Value="_room.Description" rows="6" class="form-control" id="roomDescription" />
            <ValidationMessage For="@(() => _room.Description )" />
          </FormFieldSet>

          <FormFieldSet Width="col">
            <label for="roomFacilities" class="font-weight-bold text-secondary">Убодства</label>
            <MultiSelectList T="string" Options="@optionsFacilities" SelectedOptions="@selectedOptionsFacilities" OnSelectionChanged="@HandleSelection" />
            <p>Выбрано: @string.Join(", ", selectedOptionsFacilities)</p>
          </FormFieldSet>

          <div class="row">
            <div class="col-6">
              <FormFieldSet Width="col">
                <label for="roomPeopleNumber" class="font-weight-bold text-secondary">Кол-во человек</label>
                <InputNumber @bind-Value="_room.PeopleNumber" rows="6" class="form-control" id="roomPeopleNumber" />
                <ValidationMessage For="@(() => _room.PeopleNumber )" />
              </FormFieldSet>
            </div>
            <div class="col-6">
              <FormFieldSet Width="col">
                <label for="roomSquare" class="font-weight-bold text-secondary">Площадь, м2</label>
                <InputNumber @bind-Value="_room.Square" class="form-control" id="roomSquare" />
              </FormFieldSet>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>

</EditForm>

@code {
  private EditContext _editContext = default!;
  private RoomDto _room = new RoomDto();
  private IBrowserFile? _hotelImage;

  private List<string> optionsFacilities = new() { "Wi-Fi", "Детектор дыма", "Телевизор", "Кондиционер", "Полотенца" };
  private List<string> selectedOptionsFacilities = new();

  /// <summary> Параметр позволит передать существующий отель в форму </summary>
  [Parameter]
  public RoomDto? Room { get; set; }

  [Parameter, EditorRequired]
  public string TextButtonCancel { get; set; } = "Отмена";

  private void HandleSelection(List<string> values)
  {
    selectedOptionsFacilities = values;
  }

  public void ResetForm()
  {
    _room = new RoomDto();
    _editContext = new EditContext(_room);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    _hotelImage = null;
  }

  // Метод OnInitialized заменяется методом OnParametersSet. Он будет вызываться всякий раз
  // при обновлении объекта, передаваемого через параметр Hotel.Это нужно, чтобы можно было
  // обновить или удалить изображение после запуска обработчика SubmitEditHotel в EditHotelPage
  protected override void OnParametersSet()
  {
    // создаю новый EditContext для модели отеля
    _editContext = new EditContext(_room);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());

    if (Room is not null)
    {
      _room = Room;
    }
  }

  /// <summary> Параметр OnSubmit определяет событие, которое передает введенные в форму данные обработчику, определяемому компонентом-потребителем </summary>
  [Parameter, EditorRequired]
  public Func<RoomDto, Task> OnSubmit { get; set; } = default!;

  /// <summary>
  /// Обработчик события OnValidSubmit из EditForm вызовет событие OnSubmit.
  /// Это позволит обработчику решить, как сохранить данные формы
  /// </summary>
  /// <returns></returns>
  private async Task SubmitForm() => await OnSubmit(_room);

  private List<string> optionsType = new() { "Студия", "Люкс Гранд Премиум", "Стандарт Бизнес (четырехместный)", "Номер стандарт", "Стандарт Бизнес" };
  private string selectedOptionType = "Студия";

  private void HandleSelection(string value)
  {
    selectedOptionType = value;
  }

  private void ShowFacilities(MouseEventArgs args)
  {
    throw new NotImplementedException();
  }

  private void ShowPhoto(MouseEventArgs args)
  {
    throw new NotImplementedException();
  }

  private void ShowPrices(MouseEventArgs args)
  {
    throw new NotImplementedException();
  }
}
