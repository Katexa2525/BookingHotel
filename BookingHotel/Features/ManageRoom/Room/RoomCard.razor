@inject NavigationManager NavManager

<div class="card shadow">

  <div class="card-body">
    <div class="container">
      <div class="row">

        <div class="col-3">
          @* <img src="images/NoImage.png" class="card-img-top"> *@

          @* @if (string.IsNullOrWhiteSpace(Room.MainPhoto))
          {
            <img src="images/NoImage.png" class="card-img-top" />
          }
          else
          {
            <div class="card bg-dark text-white">
              <img src="images/@Room.MainPhoto" class="card-img-top" />
            </div>
          } *@

          <div class="card-img-top">
            @if (Room != null && Room.RoomPhotos != null && Room.RoomPhotos.Any())
            {
              <PhotoCarousel Photos="Room.RoomPhotos.Select(p=>p.Photo).ToList()" Id="@Room.Id" />
            }
          </div>

        </div>

        <div class="col-5">

          @if (Room is not null && Room.RoomType is not null)
          {
            <h5 class="card-title">@Room.RoomType.Name</h5>
          }
          else
          {
            <h5 class="card-title">@Room.Id</h5>
          }

          @* Данные по кол-ву человек и площади номера *@
          <RoomPeopleSquareComponent PeopleNumber="@Room.PeopleNumber" Square="@Room.Square" />

          @* Удобства в номере *@
          <RoomFacilitiesComponent RoomFacilities="@Room.RoomFacilities" />

          <div class="d-flex justify-content-between">

            <AuthorizeView Context="authContext">
              @if (authContext.User.IsInRole("Administrator") || authContext.User.IsInRole("Hotel_owner"))
              {
                <div class="mt-4 align-bottom">
                  <button class="btn btn-outline-secondary float-right" title="Редактирование"
                          @onclick="@(() => NavManager.NavigateTo($"/hotels/{HotelId}/rooms/{Room.Id}"))">
                    <i class="bi bi-pencil"></i>
                  </button>
                </div>
              }
            </AuthorizeView>

            <div class="mt-4 align-bottom">
              <button type="button" class="btn btn-warning" @onclick="@(async () => await OnSelected.InvokeAsync(Room))">
                Забронировать
              </button>
            </div>
          </div>

        </div>

        <div class="col-4">
          <h5 class="card-body">@Room.Description</h5>
        </div>

      </div>
    </div>

  </div>
</div>

@code {

  [Parameter, EditorRequired]
  public RoomDto Room { get; set; } = default!; // определяет обязательный параметр компонента

  [Parameter, EditorRequired]
  public Guid HotelId { get; set; } = default!;

  /// <summary>События определяются с использованием типов делегатов Action или Func, или через тип EventCallback </summary>
  [Parameter, EditorRequired]
  public EventCallback<RoomDto> OnSelected { get; set; }
}
