@page "/hotels/{HotelId:guid}/rooms"
@using Application.DTO.Review.ClientRequest
@using MudBlazor

@inject IMediator Mediator
@inject NavigationManager NavManager

<PageTitle>Номера</PageTitle>

<AuthorizeView Context="authContext">
  @if (authContext.User.IsInRole("Administrator") || authContext.User.IsInRole("Hotel_owner"))
  {
    <div class="mb-4">
      <p class="font-italic text-center">
        Есть номер, который хотели бы опубликовать?
        <a href="/hotels/{@HotelId}/rooms/add-room">Добавьте это здесь.
          <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small"  />
        </a>
      </p>
    </div>
  }
</AuthorizeView>

@* Данные по отелю *@
<p class="h1">@_hotel.Name, @_hotel.Star*</p>
<div class="d-flex">
  <h6 class="card-subtitle mb-3 text-muted"><span class="oi oi-star"></span> @_hotel.Rating </h6>&nbsp;&nbsp;&nbsp;
  <h6 class="card-subtitle mb-3 text-muted"><span class="oi oi-map-marker"></span> @_hotel.Location</h6>
</div>

@* близжайшие локации около отеля *@
@if (_hotel.Locations is not null && _hotel.Locations.Any())
{
  <div class="d-flex">
    @foreach (var item in @_hotel.Locations)
    {
      <h6 class="card-subtitle mb-3 text-muted">@item.Name, &nbsp;&nbsp;&nbsp;</h6>
    }
  </div>
}

@if (_allRooms is not null && _allRooms.Any())
{
  @* <SearchComponent Placeholder="Поиск номера отеля..." TextNavigateTo=@routeSearch /> *@
  @* данные передаются в параметры компонента с помощью атрибутов элемента *@
  <SearchDateComponent Booking="@Booking" OnSelected="HandleBookingSelected" />
  // номера по отелю
  <div class="card-container">
    @foreach (var room in _allRooms)
    {
      <div class="card shadow">
        <div class="card-body">
          <RoomCard Room="@room" HotelId="@HotelId" OnSelected="HandleRoomSelected" />
        </div>
      </div>
    }
  </div>
}

@* про отель *@
<AboutHotel Caption="Про отель" Hotel="@_hotel" />

@* Удобства и услуги, питание отеля *@
<AboutHotelFacilities CaptionFacilities="Удобства и услуги отеля" CaptionFoods="Питание" Hotel="@_hotel" />

@* Отзывы *@
<HotelReview Caption="@countReview" Hotel="@_hotel" OnHandleCloseSubordinateForm="HandleCloseSubordinateForm" />

@code {

  private RoomDto? _selectedRoom;
  // закрытое поле, содержащее данные о номерах определенного отеля, или все номера всех отелей
  private IEnumerable<RoomDto>? _allRooms;
  /// <summary> Путь на страницу поиска </summary>
  private string routeSearch = string.Empty;
  private HotelDto _hotel = new HotelDto();
  private string? _errorMessage;
  private string countReview = string.Empty;
  private BookingDto Booking = new BookingDto();

  /// <summary>Параметр для передачи в маршрут Id отеля для отображения всех номеров отеля </summary>
  [Parameter]
  public Guid HotelId { get; set; }

  private void HandleRoomSelected(RoomDto room)
  {
    _selectedRoom = room;
    // переход на страницу бронирования
    string arrDate = Booking.ArrivalDate.ToShortDateString().Replace('.', '_');
    string depDate = Booking.DepartureDate.ToShortDateString().Replace('.', '_');
    string route = $"/hotels/{room.HotelId}/rooms/{room.Id}/booking/{arrDate}/{depDate}/{Booking.NumberOfAdults}/{Booking.NumberOfChilds}";
    NavManager.NavigateTo(route);
  }

  protected override async Task OnInitializedAsync()
  {
    Booking.ArrivalDate = DateTime.Now;
    Booking.DepartureDate = DateTime.Now.AddDays(1);
    Booking.NumberOfAdults = 1;
    Booking.NumberOfChilds = 0;

    // запрос на получения всех номеров отеля RoomId через GetRoomsRequest и Mediator
    var response = await Mediator.Send(new GetRoomsRequest(HotelId));

    _allRooms = response.Rooms.Select(p => new RoomDto
      {
        Id = p.Id,
        HotelId = p.HotelId,
        Description = p.Description,
        PeopleNumber = p.PeopleNumber,
        Square = p.Square,
        RoomTypeId = p.RoomTypeId,
        Prices = p.Prices,
        RoomFacilities = p.RoomFacilities,
        RoomPhotos = p.RoomPhotos,
        RoomType = p.RoomType,
        Bookings = p.Bookings,
        MainPhoto = p.MainPhoto
      });

    // получаю данные отеля по HotelId, чтобы отобразить их на странице с номерами
    var responseHotel = await Mediator.Send(new GetHotelRequest(HotelId));

    if (responseHotel is not null)
    {
      // если отель получен, сведения о нём копирую в локальное поле для передачи в HotelForm
      _hotel = responseHotel.Hotel;
    }
    else
    {
      _errorMessage = AppMessage.HotelPageLoadTextErrorMessage;
    }

    CountReviewByHotel(_hotel);

    // устанавливаю маршрут для поиска в переменную
    routeSearch = $"hotels/{HotelId}/rooms/searchRoom";
  }

  /// <summary> Метод обработчика, который получает обновленные данные фильтра </summary>
  /// <param name="bookingDto">Модель, где новые данные </param>
  private void HandleBookingSelected(BookingDto bookingDto)
  {
    Booking.ArrivalDate = bookingDto.ArrivalDate;
    Booking.DepartureDate = bookingDto.DepartureDate;
    Booking.NumberOfAdults = bookingDto.NumberOfAdults;
    Booking.NumberOfChilds = bookingDto.NumberOfChilds;
  }

  private async Task HandleCloseSubordinateForm(bool isClosed)
  {
    // обновляю данные на странице
    if (isClosed)
    {
      var response = await Mediator.Send(new GetReviewsRequest(HotelId));

      if (response is not null && response.Reviews is not null)
      {
        _hotel.Reviews = response.Reviews;
        // вычисляю рейтинг для отеля, после добавления отзыва
        double ratingHotel = Math.Round((double)response.Reviews.Sum(p => p.Star) / (double)response.Reviews.Count(), 1);
        // запрос на обновление данных отеля по значению рейтинга
        if (ratingHotel != _hotel.Rating)
        {
          _hotel.Rating = ratingHotel;
          var responseEditHotel = await Mediator.Send(new EditHotelRequest(_hotel));
        }
        CountReviewByHotel(_hotel);
      }
    }
  }

  /// <summary>Метод подсчета отзывов по отелю </summary>
  /// <param name="_hotel"></param>
  private void CountReviewByHotel(HotelDto _hotel)
  {
    if (_hotel is not null && _hotel.Reviews is not null)
      countReview = $"Отзывы ({_hotel.Reviews.Count().ToString()})";
    else
      countReview = "Отзывы (0)";
  }

}
