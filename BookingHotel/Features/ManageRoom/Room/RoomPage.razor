@page "/hotels/{HotelId:guid}/rooms"

@inject IMediator Mediator
@inject NavigationManager NavManager

<PageTitle>Номера</PageTitle>

<AuthorizeView Context="authContext">
  @if (authContext.User.IsInRole("Administrator") || authContext.User.IsInRole("Hotel_owner"))
  {
    <div class="mb-4">
      <p class="font-italic text-center">
        Есть номер, который хотели бы опубликовать?
        <a href="/hotels/{@HotelId}/rooms/add-room">Добавьте это здесь.</a>
        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Href="@($"/hotels/{HotelId}/rooms/add-room")" />
      </p>
    </div>
  }
</AuthorizeView>

@* Данные по отелю и близжайшие локации около отеля*@
<AboutHotelDataAndLocation Hotel="@_hotel" />

@if (_allRooms is not null && _allRooms.Any())
{
  @* данные передаются в параметры компонента с помощью атрибутов элемента *@
  <SearchDateComponent Booking="@Booking" OnSelected="HandleBookingSelected" />

  // номера по отелю
  <div class="card-container">
    @foreach (var room in _allRooms)
    {
      <div class="card shadow">
        <div class="card-body">
          <RoomCard Room="@room" HotelId="@HotelId" OnSelected="HandleRoomSelected" DayCountForPrice="@dayCount" />
        </div>
      </div>
    }
  </div>
}

@* про отель *@
<AboutHotel Caption="Про отель" Hotel="@_hotel" />

@* Удобства и услуги, питание отеля *@
<AboutHotelFacilities CaptionFacilities="Удобства и услуги отеля" CaptionFoods="Питание" Hotel="@_hotel" />

@* Отзывы *@
<HotelReview Caption="@countReview" Hotel="@_hotel" OnHandleCloseSubordinateForm="HandleCloseSubordinateForm" />

@code {

  private RoomDto? _selectedRoom;
  // закрытое поле, содержащее данные о номерах определенного отеля, или все номера всех отелей
  private IEnumerable<RoomDto>? _allRooms;
  private IEnumerable<RoomDto>? _allRoomsCopy; // копия всех номеров по данному отелю
  /// <summary> Путь на страницу поиска </summary>
  private string routeSearch = string.Empty;
  private HotelDto _hotel = new HotelDto();
  private string? _errorMessage;
  private string countReview = string.Empty;
  private BookingDto Booking = new BookingDto();
  private int dayCount = 1; // кол-во дней по цене

  /// <summary>Параметр для передачи в маршрут Id отеля для отображения всех номеров отеля </summary>
  [Parameter]
  public Guid HotelId { get; set; }

  private void HandleRoomSelected(RoomDto room)
  {
    _selectedRoom = room;
    // переход на страницу бронирования
    string arrDate = Booking.ArrivalDate.ToShortDateString().Replace('.', '_');
    string depDate = Booking.DepartureDate.ToShortDateString().Replace('.', '_');
    string route = $"/hotels/{room.HotelId}/rooms/{room.Id}/booking/{arrDate}/{depDate}/{Booking.NumberOfAdults}/{Booking.NumberOfChilds}";
    NavManager.NavigateTo(route);
  }

  protected override async Task OnInitializedAsync()
  {
    Booking.ArrivalDate = DateTime.Now;
    Booking.DepartureDate = DateTime.Now.AddDays(1);
    Booking.NumberOfAdults = 1;
    Booking.NumberOfChilds = 0;

    // запрос на получения всех номеров отеля RoomId через GetRoomsRequest и Mediator
    var response = await Mediator.Send(new GetRoomsRequest(HotelId));

    if (response is not null && response.Rooms is not null)
    {
      _allRooms = response.Rooms.Select(p => new RoomDto
        {
          Id = p.Id,
          HotelId = p.HotelId,
          Description = p.Description,
          PeopleNumber = p.PeopleNumber,
          Square = p.Square,
          RoomTypeId = p.RoomTypeId,
          Prices = p.Prices,
          RoomFacilities = p.RoomFacilities,
          RoomPhotos = p.RoomPhotos,
          RoomType = p.RoomType,
          Bookings = p.Bookings,
          MainPhoto = p.MainPhoto,
          // определяю цену на сегодня
          DayPrice = p.Prices is not null && p.Prices.Any(p => p.DateStart <= DateTime.Now && p.DateEnd >= DateTime.Now) ?
                     p.Prices.First(p => p.DateStart <= DateTime.Now && p.DateEnd >= DateTime.Now).DayPrice : 0.00
        });
    }
    else
      _allRooms = new List<RoomDto>();

    // сохраняю в копию все комнаты по отелю, чтобы можно было вернуть после поиска
    _allRoomsCopy = _allRooms;

    // получаю данные отеля по HotelId, чтобы отобразить их на странице с номерами
    var responseHotel = await Mediator.Send(new GetHotelRequest(HotelId));

    if (responseHotel is not null && responseHotel.Hotel is not null)
    {
      // если отель получен, сведения о нём копирую в локальное поле для передачи в HotelForm
      _hotel = responseHotel.Hotel;
    }
    else
    {
      _errorMessage = AppMessage.HotelPageLoadTextErrorMessage;
    }

    CountReviewByHotel(_hotel);

    // устанавливаю маршрут для поиска в переменную
    routeSearch = $"hotels/{HotelId}/rooms/searchRoom";
  }

  /// <summary> Метод обработчика, который получает обновленные данные фильтра </summary>
  /// <param name="bookingDto">Модель, где новые данные </param>
  private void HandleBookingSelected(BookingDto bookingDto)
  {
    IEnumerable<RoomDto>? _allRoomsDate = new List<RoomDto>();

    Booking.ArrivalDate = bookingDto.ArrivalDate;
    Booking.DepartureDate = bookingDto.DepartureDate;
    Booking.NumberOfAdults = bookingDto.NumberOfAdults;
    Booking.NumberOfChilds = bookingDto.NumberOfChilds;

    dayCount = (bookingDto.DepartureDate.Date - bookingDto.ArrivalDate.Date).Days;

    if (_allRoomsCopy is not null)
    {
      // фильтрация номеров по доступному кол-ву для размещения
      _allRooms = _allRoomsCopy.Where(p => p.PeopleNumber >= bookingDto.NumberOfAdults + bookingDto.NumberOfChilds).ToList();

      // получения коллекции номеров, которые пересекаются по датам бронирования
      if (_allRooms is not null)
      {
        _allRoomsDate = _allRooms.Where(p => p.Bookings is not null &&
              p.Bookings.Any(r => ((r.ArrivalDate <= bookingDto.ArrivalDate && r.DepartureDate >= bookingDto.DepartureDate) ||
                                   (r.ArrivalDate <= bookingDto.ArrivalDate && r.DepartureDate >= bookingDto.ArrivalDate && r.DepartureDate <= bookingDto.DepartureDate) ||
                                   (r.ArrivalDate >= bookingDto.ArrivalDate && r.DepartureDate <= bookingDto.DepartureDate) ||
                                   (r.ArrivalDate >= bookingDto.ArrivalDate && r.ArrivalDate <= bookingDto.DepartureDate && r.DepartureDate >= bookingDto.DepartureDate))
                             )).ToList();
        // вычисляю разность коллекций, чтобы удалить записи из списка _allRooms, содержащиеся в _allRoomsDate
        if (_allRoomsDate.Any())
          _allRooms = _allRooms.Except(_allRoomsDate);

        // рассчитываю цену за кол-во дней, выбранных в фильтре
        foreach (var item in _allRooms)
        {
          // определяю цену по началу выбранной даты поиска  
          item.DayPrice = item.Prices is not null && item.Prices.Any(p => p.DateStart <= bookingDto.ArrivalDate && p.DateEnd >= bookingDto.ArrivalDate) ?
                          item.Prices.First(p => p.DateStart <= bookingDto.ArrivalDate && p.DateEnd >= bookingDto.ArrivalDate).DayPrice : 0.00;
          item.DayPrice = Math.Round(item.DayPrice * dayCount, 2);
        }
      }
      // обновляю форму
      StateHasChanged();
    }

    // перехожу на страницу поиска
    //NavManager.NavigateTo(routeSearch);
  }

  private async Task HandleCloseSubordinateForm(bool isClosed)
  {
    // обновляю данные на странице
    if (isClosed)
    {
      var response = await Mediator.Send(new GetReviewsRequest(HotelId));

      if (response is not null && response.Reviews is not null)
      {
        _hotel.Reviews = response.Reviews;
        // вычисляю рейтинг для отеля, после добавления отзыва
        double ratingHotel = Math.Round((double)response.Reviews.Sum(p => p.Star) / (double)response.Reviews.Count(), 1);
        // запрос на обновление данных отеля по значению рейтинга
        if (ratingHotel != _hotel.Rating)
        {
          _hotel.Rating = ratingHotel;
          var responseEditHotel = await Mediator.Send(new EditHotelRequest(_hotel));
        }
        CountReviewByHotel(_hotel);
      }
    }
  }

  /// <summary>Метод подсчета отзывов по отелю </summary>
  /// <param name="_hotel"></param>
  private void CountReviewByHotel(HotelDto _hotel)
  {
    if (_hotel is not null && _hotel.Reviews is not null)
      countReview = $"Отзывы ({_hotel.Reviews.Count().ToString()})";
    else
      countReview = "Отзывы (0)";
  }

}
