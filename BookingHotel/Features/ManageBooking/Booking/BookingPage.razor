@page "/hotels/{HotelId:guid}/rooms/{RoomId:guid}/booking/{ArrivalDate}/{DepartureDate}/{NumberOfAdults:int}/{NumberOfChilds:int}"

@inject IMediator Mediator

@using System.ComponentModel.DataAnnotations

<div class="card card-brand mb-4 shadow">
  <div class="card-body">
    <div class="row">
      <div class="col-7">
        <h2>@_hotel.Name</h2>
        <div class="d-flex">
          <h6 class="card-subtitle mb-3 text-muted me-5"><span class="oi oi-star"></span> @_hotel.Rating </h6>
          <h6 class="card-subtitle mb-3 text-muted"><span class="oi oi-map-marker"></span> @_hotel.Location</h6>
        </div>

        <div class="card card-brand mb-4 shadow">
          <div class="card-body">
            <div class="row">
              <div class="col-4">
                <h5> Заезд </h5>
                <h5> @_arrivalDate </h5>
                <h6> @_hotel.Arrival </h6>
              </div>
              <div class="col-4">
                <h5> Выезд </h5>
                <h5> @_departureDate </h5>
                <h6> @_hotel.Departure </h6>
              </div>
              <div class="col-4">
                <h5> Гости </h5>
                <h5> @NumberOfAdults взрослых </h5>
                <h6> @NumberOfChilds детей </h6>
              </div>
            </div>
          </div>
        </div>


        <div class="card card-brand mb-4 shadow">
          <div class="card-body">
            <div class="row">
              @if (_room.RoomType is not null)
              {
                <h3>@_room.RoomType.Name</h3>
              }

              <RoomPeopleSquareComponent PeopleNumber="@_room.PeopleNumber" Square="@_room.Square" />

              <InputTextArea @bind-Value="_room.Description" class="form-control" id="roomDescription" />
            </div>

            @if (_room is not null && _room.RoomFacilities is not null && _room.RoomFacilities.Any())
            {
              <div class="row">
                <div class="card card-brand mb-4 ">
                  <div class="card-body">
                    <FormFieldSet Width="col">
                      <label for="roomFacilities" class="font-weight-bold text-secondary">Убодства в номере</label>
                      <RoomFacilitiesComponent RoomFacilities="@_room.RoomFacilities" />
                    </FormFieldSet>
                  </div>
                </div>
              </div>
            }
          </div>
        </div>

        <div class="card card-brand mb-4 shadow">
          <div class="card-body">
            <div class="row">
              <h5>Данные гостей</h5>
              @foreach (var item in @_guests)
              {
                <div class="card card-brand mb-4">
                  <div class="card-body">
                    <h5 class="fw-bold">Гость</h5>
                    <div class="row">
                      <div class="col">
                        <FormFieldSet Width="col">
                          <label class="font-weight-bold text-secondary">Фамилия</label>
                          <InputText @bind-Value="item.LastName" class="form-control" />
                        </FormFieldSet>
                      </div>
                      <div class="col">
                        <FormFieldSet Width="col">
                          <label class="font-weight-bold text-secondary">Имя</label>
                          <InputText @bind-Value="item.FirstName" class="form-control" />
                        </FormFieldSet>
                      </div>
                      <div class="col">
                        <FormFieldSet Width="col">
                          <label class="font-weight-bold text-secondary">Отчество</label>
                          <InputText @bind-Value="item.PatronymicName" class="form-control" />
                        </FormFieldSet>
                      </div>
                    </div>

                    <div class="row">
                      <div class="col">
                        <FormFieldSet Width="col">
                          <label class="font-weight-bold text-secondary">Телефон</label>
                          <InputText @bind-Value="item.PhoneNumber" class="form-control" />
                        </FormFieldSet>
                      </div>
                      <div class="col">
                        <FormFieldSet Width="col">
                          <label class="font-weight-bold text-secondary">Электронная почта</label>
                          <InputText @bind-Value="item.Email" class="form-control" type="email" />
                        </FormFieldSet>
                      </div>
                    </div>

                  </div>
                </div>
              }
            </div>
          </div>
        </div>

        <div class="card card-brand mb-4 shadow">
          <div class="card-body">
            <div class="row">
              <h5>Особые пожелания</h5>
              <div class="row">
                <InputTextArea @bind-Value="_description" class="form-control" id="description" />
              </div>
            </div>
          </div>
        </div>

      </div>

      <div class="col-5 text-end">
        <div class="card card-brand mb-4 shadow">
          <div class="card-body">
            <div class="row">
              @if (_room != null && _room.RoomPhotos != null && _room.RoomPhotos.Any())
              {
                <PhotoCarousel Photos="_room.RoomPhotos.Select(p=>p.Photo).ToList()" Id="_room.Id" />
              }
            </div>
            <div class="row">
              <div class="d-flex justify-content-between mt-5">
                <h4 class="mb-3 me-5">Итого</h4>
                @if (_room != null)
                {
                  <RoomDayPriceComponent DayCount="@dayCount" DayPrice="@_room.DayPrice" />
                }
              </div>
            </div>
            <div class="row">
              @* <button type="button" class="btn btn-primary" @onclick="BookingHandler">Забронировать</button> *@
              <button type="submit" class="btn btn-primary">Забронировать</button>
            </div>
          </div>
        </div>
      </div>

    </div>

  </div>
</div>

<style>
  h2 {
    margin-top: 20px;
    color: #333;
  }

  ul li {
    font-size: 16px;
    margin-bottom: 5px;
  }

  .btn {
    margin-top: 10px;
  }
</style>


@code {
  private bool bookingConfirmed = false;
  private string? _errorMessage;
  private string _arrivalDate = string.Empty;
  private string _departureDate = string.Empty;
  private string _description = string.Empty;
  private DateTime dateArrivalDate;
  private DateTime dateDepartureDate;
  private int dayCount = 0;

  //Random random = new Random();
  int price = Random.Shared.Next(1000, 10001);

  private RoomDto _room = new RoomDto();
  private HotelDto _hotel = new HotelDto();
  private List<GuestDto> _guests = new List<GuestDto>();
  private BookingDto _booking = new BookingDto();

  [Parameter]
  public Guid HotelId { get; set; }

  [Parameter]
  public Guid RoomId { get; set; }

  [Parameter]
  public string ArrivalDate { get; set; } = string.Empty;

  [Parameter]
  public string DepartureDate { get; set; } = string.Empty;

  [Parameter]
  public int NumberOfAdults { get; set; }

  [Parameter]
  public int NumberOfChilds { get; set; }

  protected override async Task OnInitializedAsync()
  {
    // преобразование в нормальный строковый формат даты
    _arrivalDate = ArrivalDate.Replace('_', '.');
    _departureDate = DepartureDate.Replace('_', '.');

    // дата заезда выезда в формате даты
    dateArrivalDate = DateTime.Parse(_arrivalDate);
    dateDepartureDate = DateTime.Parse(_departureDate);

    // кол-во ночей
    dayCount = (dateDepartureDate - dateArrivalDate).Days;

    _guests = new List<GuestDto>(NumberOfAdults + NumberOfChilds);

    // коллекция для заполнения гостей по брони
    for (int i = 0; i < NumberOfAdults + NumberOfChilds; i++)
    {
      _guests.Add(new GuestDto());
    }

    // получаю данные отеля по HotelId, чтобы отобразить их на странице с номерами
    var responseHotel = await Mediator.Send(new GetHotelRequest(HotelId));

    if (responseHotel is not null && responseHotel.Hotel is not null)
    {
      _hotel = responseHotel.Hotel;
      // дополняю дату заезда выезда в формате даты временем
      dateArrivalDate = dateArrivalDate.AddHours(Convert.ToInt32(_hotel.Arrival.Substring(0, 2))).AddMinutes(Convert.ToInt32(_hotel.Arrival.Substring(3, 2)));
      dateDepartureDate = dateDepartureDate.AddHours(Convert.ToInt32(_hotel.Departure.Substring(0, 2))).AddMinutes(Convert.ToInt32(_hotel.Departure.Substring(3, 2)));
    }
    else
    {
      _errorMessage = AppMessage.HotelPageLoadTextErrorMessage;
    }

    // получаю данные по номеру
    var response = await Mediator.Send(new GetRoomRequest(RoomId));

    if (response is not null && response.Room is not null)
    {
      _room = response.Room;
      // определяю цену по началу выбранной даты поиска
      _room.DayPrice = _room.Prices is not null && _room.Prices.Any(p => p.DateStart <= dateArrivalDate && p.DateEnd >= dateArrivalDate) ?
                       _room.Prices.First(p => p.DateStart <= dateArrivalDate && p.DateEnd >= dateArrivalDate).DayPrice : 0.00;
      _room.DayPrice = Math.Round(_room.DayPrice * dayCount, 2);
    }
    else
    {
      _errorMessage = AppMessage.RoomPageLoadTextErrorMessage;
    }
  }

  private void BookingHandler(MouseEventArgs args)
  {
    // формирую модель для записи бронирования
    _booking.Name = _room.RoomType is not null ? _hotel.Name.Trim() + "|" + _room.RoomType.Name.Trim() : _hotel.Name.Trim();
    _booking.RoomId = _room.Id;
    _booking.NumberOfAdults = NumberOfAdults;
    _booking.NumberOfChilds = NumberOfChilds;
    _booking.ArrivalDate = dateArrivalDate;
    _booking.DepartureDate = dateDepartureDate;
    _booking.Description = _description;
    _booking.Guests = _guests; // описание гостей

    Console.WriteLine("Забронировано!");
  }

}
