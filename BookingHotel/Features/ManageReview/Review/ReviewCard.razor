@inject IMediator Mediator

<div class="card shadow">
  <div class="card-body">
    <div class="row">
      <div class="d-flex justify-content-between">
        <h5 class="card-subtitle mb-3 "> @Review.Name</h5>
        <StarComponent StarCount="@Review.Star" />
      </div>
    </div>
    <div class="row">
      <h5 class="card-subtitle mb-3 "> @Review.DateTimeReview</h5>
    </div>
    <div class="row">
      <div class="col-11">
        <h5 class="card-subtitle mb-3 "> @Review.Description</h5>
      </div>
      <div class="col-1">
        <AuthorizeView>
          @if (context.User.IsInRole("Administrator"))
          {
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="DeleteReview" />
          }
        </AuthorizeView>
      </div>
    </div>
  </div>
</div>

@code {

  [Parameter, EditorRequired]
  public ReviewDto Review { get; set; }

  /// <summary> Свойство для возврата в родительскую форму признака, что отзыв удалён</summary>
  [Parameter, EditorRequired]
  public EventCallback<bool> OnDeleteReview { get; set; }

  private async Task DeleteReview(MouseEventArgs args)
  {
    var response = await Mediator.Send(new DeleteReviewRequest(Review.Id));
    // если удален
    if (response.IsSuccess)
    {
      // оповещаю родительскую форму
      await OnDeleteReview.InvokeAsync();
    }
  }
}
