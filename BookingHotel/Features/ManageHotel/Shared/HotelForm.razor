@using Application.Enums
@using BookingHotel.Validation

<!--Компонент EditForm используется для определения формы Blazor. Как минимум должны быть определены модель и действие отправки -->
<!--<EditForm Model="_hotel" OnValidSubmit="SubmitForm">-->
<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
  <FluentValidationValidator />

  <FormSection Title="Базовая информация" HelpText="Эта информация используется для идентификации отеля ...">

    <FormFieldSet Width="col-6">
      <label for="hotelName" class="font-weight-bold text-secondary">Наименование отеля</label>
      <InputText @bind-Value="_hotel.Name" class="form-control" id="hotelName" />
      <ValidationMessage For="@(() => _hotel.Name )" />
    </FormFieldSet>

    <FormFieldSet Width="col">
      <label for="hotelDescription" class="font-weight-bold text-secondary">Описание отеля</label>
      <InputTextArea @bind-Value="_hotel.Description" rows="6" class="form-control" id="hotelDescription" />
      <ValidationMessage For="@(() => _hotel.Description )" />
    </FormFieldSet>

    <FormFieldSet Width="col-6">
      <label for="hotelLocation" class="font-weight-bold text-secondary">Расположение</label>
      <InputText @bind-Value="_hotel.Location" class="form-control" id="hotelLocation" />
      <ValidationMessage For="@(() => _hotel.Location )" />
    </FormFieldSet>

    <FormFieldSet Width="col-3">
      <label for="hotelRating" class="font-weight-bold text-secondary">Рейтинг</label>
      <InputNumber @bind-Value="_hotel.Rating" class="form-control" id="hotelRating" />
    </FormFieldSet>

    <FormFieldSet Width="col-4">
      <label for="hotelStar" class="font-weight-bold text-secondary">Количество звёзд</label>
      <InputNumber @bind-Value="_hotel.Star" class="form-control" id="hotelStar" />
    </FormFieldSet>

    <FormFieldSet Width="col-6">
      <label for="hotelImage" class="font-weight-bold text-secondary">Фото отеля</label>
      <!--Если у отеля нет изображения, выполняю отрисовку компонента InputFile, позволяя пользователю выбрать его-->
      @if (string.IsNullOrWhiteSpace(_hotel.MainPhoto))
      {
        <InputFile OnChange="LoadHotelImage" class="form-control-file" id="hotelImage" accept=".png,.jpg,.jpeg" />
      }
      <!--Если у отеля есть изображение, отображаю его вместе с кнопкой, позволяющей удалить его-->
      else
      {
      <div class="card bg-dark text-white">
        <img src="images/@_hotel.MainPhoto" />
        <div class="card-img-overlay">
          <button class="btn btn-primary btn-sm" @onclick="RemoveHotelImage">
            Удалить
          </button>
        </div>
      </div>
      }
    </FormFieldSet>

  </FormSection>

  <div class="mt-4 mb-5">
    <div class="row">
      <div class="offset-4 col-8 text-right">
        <button class="btn btn-outline-secondary" type="button"
        onclick="@(() => _hotel=new HotelDto())">
          Сбросить
        </button>
        <button class="btn btn-primary" type="submit">
          Принять
        </button>
      </div>
    </div>
  </div>

</EditForm>


@code {
  private EditContext _editContext = default!;
  //private HotelCreateDto _hotel = new HotelCreateDto();
  private HotelDto _hotel = new HotelDto();
  private IBrowserFile? _hotelImage;

  /// <summary> Параметр OnSubmit определяет событие, которое передает введенные в форму данные обработчику, определяемому компонентом-потребителем </summary>
  [Parameter]
  public Func<HotelDto, IBrowserFile?, Task> OnSubmit { get; set; }

  /// <summary> Параметр позволит передать существующий отель в форму </summary>
  [Parameter]
  public HotelDto? Hotel { get; set; }

  public void ResetForm()
  {
    _hotel = new HotelDto(); // new HotelCreateDto();
    _editContext = new EditContext(_hotel);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    _hotelImage = null;
  }

  // Метод OnInitialized заменяется методом OnParametersSet. Он будет вызываться всякий раз
  // при обновлении объекта, передаваемого через параметр Hotel.Это нужно, чтобы можно было
  // обновить или удалить изображение после запуска обработчика SubmitEditHotel в EditHotelPage
  protected override void OnParametersSet()
  {
    // создаю новый EditContext для модели отеля
    _editContext = new EditContext(_hotel);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());

    // Если есть отель, значит редактирую. Нужно скопировать сведения об отеле в локальное поле _hotel, к которому привязаны компоненты формы
    if (Hotel is not null)
    {
      _hotel = Hotel;
    }
  }

  // protected override void OnInitialized()
  // {
  //   // создаю новый EditContext для модели отеля
  //   _editContext = new EditContext(_hotel);
  //   // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
  //   _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
  // }

  /// <summary>
  /// Обработчик события OnValidSubmit из EditForm вызовет событие OnSubmit.
  /// Это позволит обработчику решить, как сохранить данные формы
  /// </summary>
  /// <returns></returns>
  private async Task SubmitForm() => await OnSubmit(_hotel, _hotelImage);

  private void LoadHotelImage(InputFileChangeEventArgs e)
  {
    _hotelImage = e.File;
    _hotel.ImageAction = ImageAction.Add; //Задаю ImageAction для добавления при выборе изображения
  }

  /// <summary>
  /// Этот метод вызывается при нажатии кнопки «Удалить изображение». Так сбрасываеncz свойство Image, инициируя отображение компонента InputFile,
  /// а также помечаем изображение, которое нужно удалить на сервере
  /// </summary>
  private void RemoveHotelImage()
  {
    _hotel.MainPhoto = null;
    _hotel.ImageAction = ImageAction.Remove;
  }

}
