@inject NavigationManager NavManager

@using Application.Enums
@using BookingHotel.Validation

<!--Компонент EditForm используется для определения формы Blazor. Как минимум должны быть определены модель и действие отправки -->
<!--<EditForm Model="_hotel" OnValidSubmit="SubmitForm">-->
<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
  <FluentValidationValidator />

  <div class="card card-brand mb-4 shadow">
    <div class="card-body">
      <div class="row">
        <div class="col-4">
          <div>
            <!--Если у отеля нет изображения, выполняю отрисовку компонента InputFile, позволяя пользователю выбрать его-->
            @if (string.IsNullOrWhiteSpace(_hotel.MainPhoto))
            {
              <img src="images/NoImage.png" class="card-img-top" />
              <InputFile OnChange="LoadHotelImage" class="form-control-file mt-1"
                         id="hotelImage" accept=".png,.jpg,.jpeg" />
            }
            else
            {
              <div class="card bg-dark text-white">
                <img src="images/@_hotel.MainPhoto" class="card-img-top" />
                <div class="card-img-overlay">
                  <button class="btn btn-primary btn-sm" @onclick="RemoveHotelImage">
                    Удалить
                  </button>
                </div>
              </div>
            }
          </div>

          <div class="mt-5 mb-5">
            <button @onclick="ShowRooms">
              <img src="images/room.png" alt="Комнаты" width="50" height="50">
            </button>

            <button @onclick="ShowFacilities">
              <img src="images/Facility.png" alt="Удобства" width="50" height="50">
            </button>

            <button @onclick="ShowPhoto">
              <img src="images/camera.png" alt="Фото" width="50" height="50">
            </button>
          </div>

          <div class="row mt-5 mb-5">
            <div class="col text-right">
              <SaveButton TextButtonAccept="Сохранить" />

              @* <button class="btn btn-outline-secondary" type="button"
                      onclick="@(() => _hotel=new HotelDto())">
                @TextButtonCancel
              </button> *@
            </div>
          </div>
        </div>

        <div class="col-8">

          <FormFieldSet Width="col">
            <label for="hotelName" class="font-weight-bold text-secondary">Наименование отеля</label>
            <InputText @bind-Value="_hotel.Name" class="form-control" id="hotelName" />
            <ValidationMessage For="@(() => _hotel.Name )" />
          </FormFieldSet>

          <FormFieldSet Width="col">
            <label for="hotelDescription" class="font-weight-bold text-secondary">Описание отеля</label>
            <InputTextArea @bind-Value="_hotel.Description" rows="6" class="form-control" id="hotelDescription" />
            <ValidationMessage For="@(() => _hotel.Description )" />
          </FormFieldSet>

          <FormFieldSet Width="col">
            <label for="hotelLocation" class="font-weight-bold text-secondary">Расположение</label>
            <InputText @bind-Value="_hotel.Location" class="form-control" id="hotelLocation" />
            <ValidationMessage For="@(() => _hotel.Location )" />
          </FormFieldSet>

          <div class="row">
            <div class="col-6">
              <FormFieldSet Width="col">
                <label for="hotelArrival" class="font-weight-bold text-secondary">Заезд с</label>
                <InputText @bind-Value="_hotel.Arrival" class="form-control" id="hotelArrival" />
              </FormFieldSet>

              <FormFieldSet Width="col">
                <label for="hotelDeparture" class="font-weight-bold text-secondary">Выезд до</label>
                <InputText @bind-Value="_hotel.Departure" class="form-control" id="hotelDeparture" />
              </FormFieldSet>
            </div>
            <div class="col-6">
              <FormFieldSet Width="col">
                <label for="hotelRating" class="font-weight-bold text-secondary">Рейтинг</label>
                <InputNumber @bind-Value="_hotel.Rating" class="form-control" id="hotelRating" />
              </FormFieldSet>

              <div class="row">
                <div class="col-8">
                  <FormFieldSet Width="col">
                    <label for="hotelStar" class="font-weight-bold text-secondary">Звёзд</label>
                    <InputNumber @bind-Value="_hotel.Star" class="form-control" id="hotelStar" min="0" max="5" />
                  </FormFieldSet>
                </div>
                <div class="col-4">
                  <label for="hotelStar" class="font-weight-bold text-secondary"></label>
                  <StarComponent StarCount="@_hotel.Star" StarClicked="@SetHotelStar" />
                </div>
              </div>
            </div>
          </div>


        </div>
      </div>
    </div>
  </div>

</EditForm>


@code {
  private EditContext _editContext = default!;
  private HotelDto _hotel = new HotelDto();
  private IBrowserFile? _hotelImage;

  private void SetHotelStar(int star)
  {
    _hotel.Star = star;
  }

  [Parameter, EditorRequired]
  public string TextButtonCancel { get; set; } = "Отмена";

  /// <summary> Параметр OnSubmit определяет событие, которое передает введенные в форму данные обработчику, определяемому компонентом-потребителем </summary>
  [Parameter, EditorRequired]
  public Func<HotelDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;

  /// <summary> Параметр позволит передать существующий отель в форму </summary>
  [Parameter]
  public HotelDto? Hotel { get; set; }

  public void ResetForm()
  {
    _hotel = new HotelDto(); // new HotelCreateDto();
    _editContext = new EditContext(_hotel);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    _hotelImage = null;
  }

  // Метод OnInitialized заменяется методом OnParametersSet. Он будет вызываться всякий раз
  // при обновлении объекта, передаваемого через параметр Hotel.Это нужно, чтобы можно было
  // обновить или удалить изображение после запуска обработчика SubmitEditHotel в EditHotelPage
  protected override void OnParametersSet()
  {
    // создаю новый EditContext для модели отеля
    _editContext = new EditContext(_hotel);
    // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
    _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());

    // Если есть отель, значит редактирую. Нужно скопировать сведения об отеле в локальное поле _hotel, к которому привязаны компоненты формы
    if (Hotel != null)
    {
      //_hotel = Hotel;
      _hotel.Id = Hotel.Id;
      _hotel.Name = Hotel.Name;
      _hotel.Description = Hotel.Description;
      _hotel.Location = Hotel.Location;
      _hotel.Star = Hotel.Star;
      _hotel.MainPhoto = Hotel.MainPhoto;
      _hotel.ImageAction = ImageAction.None;
      _hotel.Rating = Hotel.Rating;
      _hotel.Arrival = Hotel.Arrival;
      _hotel.Departure = Hotel.Departure;
      _hotel.Rooms = Hotel.Rooms;
      _hotel.Foods = Hotel.Foods;
      _hotel.Locations = Hotel.Locations;
      _hotel.HotelFacilities = Hotel.HotelFacilities;
      _hotel.HotelPhotos = Hotel.HotelPhotos;
      _hotel.HotelUsefulInfo = Hotel.HotelUsefulInfo;
      _hotel.Reviews = Hotel.Reviews;
    }
  }

  // protected override void OnInitialized()
  // {
  //   // создаю новый EditContext для модели отеля
  //   _editContext = new EditContext(_hotel);
  //   // Настраиваю EditContext для использования нового класса BootstrapCssClassProvider
  //   _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
  // }

  /// <summary>
  /// Обработчик события OnValidSubmit из EditForm вызовет событие OnSubmit.
  /// Это позволит обработчику решить, как сохранить данные формы
  /// </summary>
  /// <returns></returns>
  private async Task SubmitForm() => await OnSubmit(_hotel, _hotelImage);

  private void LoadHotelImage(InputFileChangeEventArgs e)
  {
    _hotelImage = e.File;
    _hotel.ImageAction = ImageAction.Add; //Задаю ImageAction для добавления при выборе изображения
  }

  /// <summary>
  /// Этот метод вызывается при нажатии кнопки «Удалить изображение». Так сбрасываеncz свойство Image, инициируя отображение компонента InputFile,
  /// а также помечаем изображение, которое нужно удалить на сервере
  /// </summary>
  private void RemoveHotelImage()
  {
    _hotel.MainPhoto = null;
    _hotel.ImageAction = ImageAction.Remove;
  }

  /// <summary> Обработчик нажатия кнопки Room, чтобы добавлять или отобразить номер </summary>
  private void ShowRooms()
  {
    NavManager.NavigateTo($"/hotels/{Hotel.Id}/rooms");
  }

  private void ShowPhoto(MouseEventArgs args)
  {
    NavManager.NavigateTo($"/hotels/{Hotel.Id}/photo");
  }

  private void ShowFacilities(MouseEventArgs args)
  {
    NavManager.NavigateTo($"/hotels/{Hotel.Id}/facilities");
  }
}
