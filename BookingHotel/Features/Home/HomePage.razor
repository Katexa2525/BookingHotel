@* определяет маршрут, за который отвечает этот компонент HomePage *@
@page "/"

@inject IMediator Mediator
@*  для получения экземпляров объектов из контейнера внедрения зависимостей *@
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager

@using System.Security.Claims
@using Application.DTO.Hotel.CQRS
@using Application.DTO.Hotel.Mediatr
@using Application.DTO.Review.ClientRequest
@using MudBlazor

<PageTitle>Отели</PageTitle>

@if (_allHotels is not null && _allHotels.Any())
{
  <AuthorizeView Context="authContext">
    @if (authContext.User.IsInRole("Administrator") || authContext.User.IsInRole("Hotel_owner"))
    {
      <div class="mb-4">
        <p class="font-italic text-center">
          Есть отель, который хотели бы опубликовать?
          <a href="add-hotel">Добавьте это здесь</a>.
          <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Href="add-hotel" />
        </p>
      </div>
    }
  </AuthorizeView>

  // данные передаются в параметры компонента с помощью атрибутов элемента
  <HotelDetails Hotel="_selectedHotel" />

  <SearchComponent Placeholder="Поиск отеля..." TextNavigateTo="search" />

  <ViewSwitcher Items="_allHotels" Context="hotel">
    <GridTemplate>
      <HotelCard Hotel="hotel" OnSelected="HandleHotelSelected" OnHandleCloseReviewForm="HandleCloseReviewForm" />
    </GridTemplate>

    <HeaderTemplate>
      <th>Наименование отеля</th>
      <th>Расположение</th>
      <th>Рейтинг</th>
      <th>Кол-во звезд</th>
      <th></th>
    </HeaderTemplate>

    <RowTemplate>
      <th scope="col">@hotel.Name</th>
      <td>@hotel.Location</td>
      <td>@hotel.Rating</td>
      <td>@hotel.Star</td>
      <td class="text-right">
        <button @onclick="@(() =>HandleHotelSelected (hotel))" title="Просмотр" class="btn btn-primary">
          <i class="bi bi-binoculars"></i>
        </button>
        <AuthorizeView Context="authContext">
          @if (authContext.User.IsInRole("Administrator") || authContext.User.IsInRole("Hotel_owner"))
          {
            <button @onclick="@(() => NavManager.NavigateTo ($"/edit-hotel/{hotel.Id}"))" title="Редактирование"
            class="btn btn-outline-secondary">
              <i class="bi bi-pencil"></i>
            </button>
          }
        </AuthorizeView>
      </td>
    </RowTemplate>
  </ViewSwitcher>
}
else
{
  <NoHotels>
    В настоящее время нет отелей,
    <a href="add-hotel">почему бы не добавить один?</a>
  </NoHotels>
}

@code {

  private HotelDto? _selectedHotel;
  // закрытое поле, содержащее данные об отелях
  private IEnumerable<HotelDto>? _allHotels;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      // запрос на получения всех отелей через GetHotelsRequest и Mediator
      var response = await Mediator.Send(new GetHotelsRequest());

      _allHotels = response.Hotels.Select(p => new HotelDto
        {
          Id = p.Id,
          Name = p.Name,
          Description = p.Description,
          Location = p.Location,
          Rating = p.Rating,
          Star = p.Star,
          MainPhoto = p.MainPhoto
        });

    }
    catch (HttpRequestException ex)
    {
      // обработка ответа о неудачном завершении Http вызова
      Console.Write(AppMessage.GetHotelAllLoadTextErrorMessage);
      Console.WriteLine($": {ex.Message}");
    }
    catch (AccessTokenNotAvailableException ex)
    {
      // перенаправление, если ошибка аутентификации, т.е. не аутентифицированный запрос
      ex.Redirect(requestOptions =>
      {
        requestOptions.TryAddAdditionalParameter("prompt", "login");
        requestOptions.TryAddAdditionalParameter("loginHint", "peter@contoso.com");
      });
    }
  }

  private void HandleHotelSelected(HotelDto hotel)
  {
    _selectedHotel = hotel;
    //StateHasChanged(); //- не нужен, т.к. тип EventCallback вызывает этот метод для обрабатывающего события компонента
  }

  private async Task HandleCloseReviewForm(Tuple<bool, HotelDto> tuple)
  {
    bool isCloseReviewForm = tuple.Item1;
    HotelDto hotel = tuple.Item2;
    if (isCloseReviewForm )
    {
      // получаю данные по отелю
      var responseHotel = await Mediator.Send(new GetHotelRequest(hotel.Id));

      if (responseHotel is not null && responseHotel.Hotel is not null && responseHotel.Hotel.Reviews is not null)
      {
        var reviews = responseHotel.Hotel.Reviews;
        // вычисляю рейтинг для отеля, после добавления отзыва
        double ratingHotel = Math.Round((double)reviews.Sum(p => p.Star) / (double)reviews.Count(), 1);
        // запрос на обновление данных отеля по значению рейтинга
        if (ratingHotel != responseHotel.Hotel.Rating)
        {
          hotel = responseHotel.Hotel;
          hotel.Rating = ratingHotel;
          var responseEditHotel = await Mediator.Send(new EditHotelRequest(hotel));
          StateHasChanged();
        }
      }
    }
  }
}
