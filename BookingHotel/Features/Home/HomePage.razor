@* определяет маршрут, за который отвечает этот компонент HomePage *@
@page "/" 

@inject IMediator Mediator
@*  для получения экземпляров объектов из контейнера внедрения зависимостей *@
@* @inject HttpClient Http *@ 
@inject IHttpClientFactory ClientFactory

@using System.Security.Claims
@using Application.ConstMessages
@using Application.DTO.Hotel
@using Application.DTO.Hotel.ClientRequest

<PageTitle>Booking Hotel</PageTitle>

<!--
<AuthorizeView>
<Authorized>
The user: @context.User.FindFirst(ClaimTypes.Name).Value is authorized
</Authorized>
<NotAuthorized>
The User is not authorized
</NotAuthorized>
</AuthorizeView>
-->

@if (_hotels == null)
{
  <p>Loading hotels...</p>
}
else
{
  <HotelDetails Hotel="_selectedHotel"/> // данные передаются в параметры компонента с помощью атрибутов элемента
  <HotelSearch/> // компонент TrailSearch
  @*  <AddButton /> *@ // компонент Кнопка Add

  <div class="grid">
    @foreach (var hotel in _hotels)
    {
      <HotelCard Hotel="hotel" OnSelected="HandleHotelSelected" />
    }
  </div>
}

@code {
  // это объявление свойства альтернатива выше указанной директиве @inject, представляющий синтаксический сахар свойства ниже
  // [Inject]
  // public HttpClient Http { get; set; }

  // закрытое поле, содержащее данные о тропах
  private IEnumerable<Hotel>? _hotels;
  private Hotel? _selectedHotel;
  private IEnumerable<HotelDto>? _allHotels;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      //Guid Id, string Name, string Description, string Location, double Rating, int Star, string? MainPhoto
      // запрос на получения всех отелей через GetHotelsRequest и Mediator
      var response = await Mediator.Send(new GetHotelsRequest());
      _allHotels = response.Hotels.Select(p => new HotelDto
      {
          Id = p.Id, Description = p.Description, Location = p.Location, Rating = p.Rating,
          Star = p.Star, MainPhoto = p.MainPhoto
      });

      // Http вызов загружает тестовые данные из json
      //_hotels = await Http.GetFromJsonAsync<IEnumerable<Hotel>>("hotels/hotel-data.json");

      var client = ClientFactory.CreateClient("NoAuthenticationClient");
      _hotels = await client.GetFromJsonAsync<IEnumerable<Hotel>>("hotels/hotel-data.json");
    }
    catch (HttpRequestException ex)
    {
      // обработка ответа о неудачном завершении Http вызова
      Console.Write(AppMessage.GetHotelAllLoadTextErrorMessage);
      Console.WriteLine($": {ex.Message}");
    }
    catch (AccessTokenNotAvailableException ex)
    {
      // перенаправление, если ошибка аутентификации, т.е. не аутентифицированный запрос
      ex.Redirect(requestOptions =>
      {
        requestOptions.TryAddAdditionalParameter("prompt", "login");
        requestOptions.TryAddAdditionalParameter("loginHint", "peter@contoso.com");
      });
    }
  }

  private void HandleHotelSelected(Hotel hotel)
  {
    _selectedHotel = hotel;
     //StateHasChanged(); //- не нужен, т.к. тип EventCallback вызывает этот метод для обрабатывающего события компонента
  }
}
