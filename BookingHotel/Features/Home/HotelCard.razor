@using BookingHotel.Features.ManageReview.Review
@inject NavigationManager NavManager

<div class="card shadow" style="width: 18rem;">

  <a href="/hotels/{@Hotel.Id}/rooms">
    @* <img src="@(!string.IsNullOrWhiteSpace(Hotel.MainPhoto) ? $"images/{Hotel.MainPhoto}"
                                                            : "images/NoImage.png")"
         class="card-img-top" alt="@Hotel.Name"> *@

    <div class="card-img-top">
      @if (Hotel == null || (Hotel != null && Hotel.HotelPhotos == null))
      {
        <img src="images/NoImage.png" class="card-img-top" />
      }
      else
      {
        <PhotoCarousel Photos="Hotel.HotelPhotos.Select(p => p.Photo).ToList()" Id="Hotel.Id" />
      }
    </div>
  </a>

  <div class="card-body">
    <a href="/hotels/{@Hotel.Id}/rooms">
      <h5 class="card-title">
        @Hotel.Name, @Hotel.Star
        <span class="oi oi-star" style="font-size: 10px; vertical-align: text-top; left: -5px;" />
      </h5>
    </a>
    <div class="d-flex justify-content-between">
      <h6 class="card-subtitle mb-3 text-muted"><span class="oi oi-map-marker"></span> @Hotel.Location</h6>
      <h6 class="card-subtitle mb-3 text-muted"><span class="oi oi-chat"></span> @Hotel.Rating </h6>
    </div>

    @* вызывается делегат, передавая текущий отель *@
    <div class="d-flex justify-content-between">
      <div>
        <button class="btn btn-primary" @onclick="@(async () => await OnSelected.InvokeAsync(Hotel))" title="Просмотр">
          <i class="bi bi-binoculars"></i>
        </button>

        <AuthorizeView Context="authContext">
          @if (authContext.User.IsInRole("Administrator") || authContext.User.IsInRole("Hotel_owner"))
          {
            <button class="btn btn-outline-secondary float-right" title="Редактирование"
                    @onclick="@(() => NavManager.NavigateTo($"/edit-hotel/{Hotel.Id}"))">
              <i class="bi bi-pencil"></i>
            </button>
          }
        </AuthorizeView>

      </div>
      <div class="d-flex gap-2">
        <FavoriteButton Hotel="Hotel" />
        <AuthorizeView Context="authContext">
          <button class="btn btn-outline-secondary float-right" title="Добавить отзыв" @onclick="ShowFormReview">
            <i class="bi bi-chat-dots-fill"></i>
          </button>
        </AuthorizeView>
      </div>
    </div>

  </div>

  @* Форма Отзывы *@
  <ShowReview Hotel="@Hotel" IsModalOpen="@isModalHotelReviewOpen" ModalTitle="Отзыв об отеле" OnCloseModal="CloseModalReviewHandlerAsync"
              TextButtonAccept="Опубликовать" />
</div>

@code {
  private bool isModalHotelReviewOpen = false;

  [Parameter, EditorRequired]
  public HotelDto Hotel { get; set; } = default!; // определяет обязательный параметр компонента

  /// <summary>События определяются с использованием типов делегатов Action или Func, или через тип EventCallback </summary>
  [Parameter, EditorRequired]
  public EventCallback<HotelDto> OnSelected { get; set; }

  [Parameter, EditorRequired]
  public EventCallback<Tuple<bool, HotelDto>> OnHandleCloseReviewForm { get; set; }

  private void ShowFormReview(MouseEventArgs args)
  {
    isModalHotelReviewOpen = true;
  }

  private async Task CloseModalReviewHandlerAsync()
  {
    isModalHotelReviewOpen = false;
    // обновляю данные на странице
    Tuple<bool, HotelDto> dataHotel = new Tuple<bool, HotelDto>(true, Hotel);
    await OnHandleCloseReviewForm.InvokeAsync(dataHotel);
  }

}