@using LeafletForBlazor

<div class="drawer-wrapper @(_isOpen ? "slide" : "")">
  <div class="drawer-mask"></div>
  <div class="drawer">
    @if (_activeHotel is not null)
    {
      <div class="drawer-content">

        @* <img class="card-img-top" src="@(!string.IsNullOrWhiteSpace(_activeHotel.MainPhoto) ? $"images/{_activeHotel.MainPhoto}"
                                                                       : "images/NoImage.png")" /> *@

        @if (_activeHotel.HotelPhotos == null)
        {
          <img src="images/NoImage.png" class="card-img-top" />
        }
        else
        {
          <PhotoCarousel Photos="_activeHotel.HotelPhotos.Select(p => p.Photo).ToList()" Id="_activeHotel.Id" />
        }


        <div class="trail-details">
          <h3>
            @_activeHotel.Name, @_activeHotel.Star
            <span class="oi oi-star" style="font-size: 10px; vertical-align: text-top; left: -5px;" />
          </h3>
          <div class="d-flex justify-content-between">
            <h6 class="mb-3 text-muted"> <span class="oi oi-map-marker"></span> @_activeHotel.Location </h6>
            <h6 class="mb-3 text-muted"> <span class="oi oi-chat"></span> @_activeHotel.Rating </h6>
          </div>
          <p class="mt-4">@_activeHotel.Description</p>
        </div>
      </div>
      <div class="drawer-controls">
        <button class="btn btn-secondary" @onclick="Close">Close</button>
      </div>

      <button type="button" @onclick="onClickRun">Показать на карте</button>
      //launch moving points
      <RealTimeMap @ref="realTimeMap"
                   width="600px"
                   height="600px"
                   Parameters="@parameters" OnAfterMapLoaded="OnMapLoaded"></RealTimeMap>

    }
  </div>
</div>

@code {
  private bool _isOpen;
  private HotelDto? _activeHotel;
  private static double _latitude;
  private static double _longitude;
  private static Guid _id;

  /// <summary>Параметр компонента определяется как открытое свойство, декорирование атрибутами</summary>
  [Parameter, EditorRequired]
  public HotelDto? Hotel { get; set; }

  protected override void OnParametersSet()
  {
    if (Hotel != null)
    {
      _activeHotel = Hotel;

      _latitude = Hotel.Latitude is not null ? Hotel.Latitude.Value : 0;
      _longitude = Hotel.Longitude is not null ? Hotel.Longitude.Value : 0;
      _id = Hotel.Id;

      _isOpen = true;
    }
  }

  private void Close()
  {
    _activeHotel = null;
    _isOpen = false;
  }

  RealTimeMap? realTimeMap; //reference to map control
  RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters()  //general map settings
    {
      basemap = new RealTimeMap.Basemap()
      {
        basemapLayers = new List<RealTimeMap.BasemapLayer>()
                {
                    new RealTimeMap.BasemapLayer()
                    {
                        url = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                        attribution = "©Open Street Map",
                        title = "Open Street Map",
                        detectRetina = true
                    },
                    new RealTimeMap.BasemapLayer()
                    {
                        url = "https://tile.opentopomap.org/{z}/{x}/{y}.png",
                        attribution = "Open Topo",
                        title = "Open Topo",
                        detectRetina = true
                    },
                }

      },
      location = new RealTimeMap.Location()
      {
        latitude = _latitude,
        longitude = _longitude,
      //  latitude = 44.4501715,
      //  longitude = 26.1107672,
      },
      zoomLevel = 18
    };

  RealTimeMap.PointSymbol symbol = new RealTimeMap.PointSymbol()
    {
      color = "red",
      fillColor = "yellow",
      radius = 10,
      weight = 3,
      opacity = 1,
      fillOpacity = 1
    };
  bool run = false;

  private async Task onClickRun() //Button onclick event
  {
    RealTimeMap.PointTooltip tooltip = new RealTimeMap.PointTooltip()
      {
        content = $"{_activeHotel.Name}, {_activeHotel.Star}* - {Math.Round(_latitude, 3)}; {Math.Round(_longitude, 3)}",
        opacity = 0.6
      };
    await realTimeMap.movePoint(new double[] { _latitude, _longitude }, symbol, tooltip);
  }

  List<RealTimeMap.StreamPoint> markers = new()
    {
        new RealTimeMap.StreamPoint()
        {
            guid = _id,
            latitude = _latitude,
            longitude = _longitude,
            type = "custom-marker",
            value = "Метка 1"
        }
    };

  private async Task OnMapLoaded(RealTimeMap.MapEventArgs args)
  {
    if (realTimeMap is null) return;

    await realTimeMap.Geometric.Points.upload(markers, true);

  }

  
}

