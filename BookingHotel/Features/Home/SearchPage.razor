<!-- параметры маршрута определяются с помощью фигурных скобок в сегменте маршрута -->
@page "/search/{SearchTerm}"
@* @page "/search/{SearchTerm}/maxrating/{MaxRating:float}" *@

@inject NavigationManager NavManager
@* @inject HttpClient Http *@
@inject IHttpClientFactory ClientFactory

<!-- цепочка навигации позволяет вернуться на главную страницу -->
<NavigationСhain LastChainName="Search"/>

<PageTitle>Search hotels</PageTitle>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm" MinRating="MinRating" MaxRating="MaxRating" />

@if(_searchResults==null)
{
  <p>Loading search results...</p>
}
else
{
  <HotelDetails Hotel="_selectedHotel" />
  <div class="grid">
    @foreach (var hotel in _searchResults)
    {
      <HotelCard Hotel="hotel" OnSelected="HandleHotelSelected" />
    }
  </div>
}

@code {
  private IEnumerable<Hotel>? _searchResults;
  private Hotel? _selectedHotel;
  private IEnumerable<Hotel>? _cachedSearchResults = Array.Empty<Hotel>(); // хранит копию неотфильтрованных результатов поиска

  /// <summary> Параметр компонента, совпадающий с именем параметра маршрута, необходим для захвата его значения </summary>
  [Parameter]
  public string SearchTerm { get; set; } = default!;

  [Parameter, SupplyParameterFromQuery]
  public float? MinRating { get; set; }
  [Parameter, SupplyParameterFromQuery]
  public float? MaxRating { get; set; }

  // Когда компонент загружается, он получает все еотели из фиктивного файла данных и находит все отели, в названии или местоположении 
  // которых содержится поисковый запрос 
  protected override async Task OnInitializedAsync()
  {
    try
    {
      //var allHotel = await Http.GetFromJsonAsync<IEnumerable<Hotel>>("hotels/hotel-data.json");

      var client = ClientFactory.CreateClient("NoAuthenticationClient");
      var allHotel = await client.GetFromJsonAsync<IEnumerable<Hotel>>("hotels/hotel-data.json");
      _searchResults = allHotel!.Where(p => p.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) || 
                                            p.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
      _cachedSearchResults = _searchResults;
    }
    catch (HttpRequestException ex)
    {
      Console.WriteLine($"There was a problem loading hotel data: {ex.Message}");
    }
  }

  // protected override void OnParametersSet()
  // {
  //   if (_cachedSearchResults.Any() && MaxRating.HasValue)
  //   {
  //     _searchResults = _cachedSearchResults.Where(p => p.Rating <= MaxRating.Value);
  //   }
  //   // если кешированные результаты поиска есть, а фильтра нет, сбрасываем результаты, чтобы получить неотфильтрованные данные
  //   else if(_cachedSearchResults.Any() && MaxRating is null)
  //   {
  //     _searchResults = _cachedSearchResults;
  //   }
  // }

  protected override void OnParametersSet() => UpdateFilters();

  private void HandleHotelSelected(Hotel hotel) => _selectedHotel = hotel;

  private void UpdateFilters()
  {
    // переменная будет содержать список лямбда выражений на основе имеющихся поисковых фильтров
    var filters = new List<Func<Hotel, bool>>();

    // если определeн фильтр MinRating, добавляем лямбда выражение для него в список фильтров
    if (MinRating is not null && MinRating > 0)
    {
      filters.Add(p => p.Rating >= MinRating);
    }
    // если определeн фильтр MaxRating, добавляем лямбда выражение для него в список фильтров
    if (MaxRating is not null && MaxRating > 0)
    {
      filters.Add(p => p.Rating <= MaxRating);
    }

    if (filters.Any())
    {
      // при наличии фильтров, используем их и фильтруем кешированные результаты поиска
      _searchResults = _cachedSearchResults.Where(hotel=> filters.All(filter=>filter(hotel)));
    }
    else
    {
      // иначе, используем неотфильтрованные кешированные результаты поиска  
      _searchResults = _cachedSearchResults;
    }
  }
}
