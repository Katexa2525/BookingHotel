<!-- параметры маршрута определяются с помощью фигурных скобок в сегменте маршрута -->
@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxrating/{MaxRating:float}"

@inject NavigationManager NavManager
@inject HttpClient Http

<!-- цепочка навигации позволяет вернуться на главную страницу -->
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item">
      <a href="/">Home</a>
    </li>
    <li class="breadcrumb-item active" arla-current="page">
      Search
    </li>
  </ol>
</nav>

<PageTitle>Search hotels</PageTitle>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm" />

@if(_searchResults==null)
{
  <p>Loading search results...</p>
}
else
{
  <HotelDetails Hotel="_selectedHotel" />
  <div class="grid">
    @foreach (var hotel in _searchResults)
    {
      <HotelCard Hotel="hotel" OnSelected="HandleHotelSelected" />
    }
  </div>
}

@code {
  private IEnumerable<Hotel>? _searchResults;
  private Hotel? _selectedHotel;
  private IEnumerable<Hotel>? _cachedSearchResults = Array.Empty<Hotel>(); // хранит копию неотфильтрованных результатов поиска

  // Параметр компонента, совпадающий с именем параметра маршрута, необходим для захвата его значения 
  [Parameter]
  public string SearchTerm { get; set; } = default!;

  [Parameter]
  public float? MaxRating { get; set; }

  // Когда компонент загружается, он получает все еотели из фиктивного файла данных и находит все отели, в названии или местоположении 
  // которых содержится поисковый запрос 
  protected override async Task OnInitializedAsync()
  {
    try
    {
      var allHotel = await Http.GetFromJsonAsync<IEnumerable<Hotel>>("hotels/hotel-data.json");
      _searchResults = allHotel!.Where(p => p.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) || 
                                            p.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
      _cachedSearchResults = _searchResults;
    }
    catch (HttpRequestException ex)
    {
      Console.WriteLine($"There was a problem loading hotel data: {ex.Message}");
    }
  }

  protected override void OnParametersSet()
  {
    if (_cachedSearchResults.Any() && MaxRating.HasValue)
    {
      _searchResults = _cachedSearchResults.Where(p => p.Rating <= MaxRating.Value);
    }
    // если кешированные результаты поиска есть, а фильтра нет, сбрасываем результаты, чтобы получить неотфильтрованные данные
    else if(_cachedSearchResults.Any() && MaxRating is null)
    {
      _searchResults = _cachedSearchResults;
    }
  }

  private void HandleHotelSelected(Hotel hotel) => _selectedHotel = hotel;
}
