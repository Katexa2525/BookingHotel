
@inject NavigationManager NavManager
@inject IMediator Mediator
@inject IMapper Mapper

@using System.Collections.Generic

@if (IsModalOpen)
{
  <div class="modal show d-block" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">@ModalTitle</h5>
          <button type="button" class="btn-close" @onclick="CloseModal"></button>
        </div>
        <div class="modal-body" style="max-height: 500px; overflow-y: auto;">
          <table class="table">
            <tbody>
              @foreach (var item in _roomFacilities)
              {
                <tr>
                  <td>
                    <FormFieldSet Width="col">
                      <InputText @bind-Value="@item.Name" class="form-control" id="facilityName" />
                    </FormFieldSet>
                  </td>
                  <td>
                    <AuthorizeView>
                      @if (context.User.IsInRole("Administrator") || context.User.IsInRole("Hotel_owner"))
                      {
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteRow(item)" />
                      }
                    </AuthorizeView>
                  </td>
                </tr>
              }
            </tbody>
          </table>
        </div>
        <AuthorizeView>
          @if (context.User.IsInRole("Administrator") || context.User.IsInRole("Hotel_owner"))
          {
            <div class="modal-footer row">
              <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Large" OnClick="AddRow" />
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Large" OnClick="Save" />
              </MudButtonGroup>
              <div class="row">
                @if (_submitSuccessful)
                {
                  <SuccessAlert Message="Данные по удобствам номера отеля сохранены!" />
                }
                else if (_errorMessage is not null)
                {
                  <ErrorAlert Message="@_errorMessage" />
                }
              </div>
            </div>
          }
        </AuthorizeView>
      </div>
    </div>
  </div>
}

@code {
  private bool _submitSuccessful = false; // поле для отслеживания успешности отправки содержимого формы
  private string? _errorMessage; // поле для хранения сообщения об ошибке, если при отправке что-то пошло не так
  private List<RoomFacilityDto>? _roomFacilities = new List<RoomFacilityDto>();
  private RoomFacilityDto _facility;
  /// <summary> Список для сохранения удаленных записей, чтобы можно было потом удалить при сохранении </summary>
  private List<RoomFacilityDto>? _roomFacilitiesDel = new List<RoomFacilityDto>();

  [Parameter, EditorRequired]
  public Guid RoomId { get; set; } = default!;

  [Parameter, EditorRequired]
  public List<RoomFacilityDto>? RoomFacilities { get; set; } = default!;

  /// <summary>Событие, что окно формы закрыто и надо обработать это событие в родительской форме </summary>
  [Parameter, EditorRequired]
  public EventCallback OnCloseModal { get; set; }

  [Parameter]
  public bool IsModalOpen { get; set; } = false;

  [Parameter, EditorRequired]
  public string ModalTitle { get; set; } = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    _submitSuccessful = false;
  }

  protected override async Task OnParametersSetAsync()
  {
    _roomFacilities = RoomFacilities;
    // обновляю данные по Facility по данному отелю
    var response = await Mediator.Send(new GetRoomFacilitiesRequest(RoomId));
    if (response is not null && response.RoomFacilities is not null && response.RoomFacilities.Any())
    {
      _roomFacilities = response.RoomFacilities;
    }
  }

  private void CloseModal()
  {
    _submitSuccessful = false;
    IsModalOpen = false;
    // оповещаю родительскую форму
    OnCloseModal.InvokeAsync();
  }

  private void AddRow()
  {
    _roomFacilities.Add(new RoomFacilityDto { RoomId = this.RoomId });
  }

  private void DeleteRow(RoomFacilityDto item)
  {
    _roomFacilitiesDel.Add(item);
    _roomFacilities.Remove(item);
  }

  private async Task Save(MouseEventArgs args)
  {
    try
    {
      // добавление записей
      if (_roomFacilities is not null && _roomFacilities.Any())
      {
        foreach (RoomFacilityDto item in _roomFacilities)
        {
          if (item.Id == Guid.Empty)
          {
            var response = await Mediator.Send(new AddRoomFacilityRequest(Mapper.Map<RoomFacilityCreateWithIdDto>(item)));
            if (response.roomFacilityId == Guid.Empty)
            {
              _submitSuccessful = false;
              _errorMessage = AppMessage.RoomFacilityPageSaveTextErrorMessage;
              // Если при сохранении произошла ошибка, вручную вызываю метод StateHasChanged, чтобы обновить
              // пользовательский интерфейс сообщением об ошибке
              StateHasChanged();
              return;
            }
            else
              _submitSuccessful = true;
          }
          // проверяю на изменение данных
          else
          {
            if (RoomFacilities is not null && RoomFacilities.Any())
            {
              var itemEq = RoomFacilities.First(p => p.Id.Equals(item.Id));
              // если по Id названия не совпадают, т.е. корректировка была
              if (!item.Name.Equals(itemEq.Name))
              {
                // обновляю
                var response = await Mediator.Send(new EditRoomFacilityRequest(Mapper.Map<RoomFacilityDto>(item)));
                if (!response.IsSuccess)
                {
                  _submitSuccessful = false;
                  _errorMessage = AppMessage.RoomFacilityPageSaveTextErrorMessage;
                }
                else
                  _submitSuccessful = true;
              }
            }
          }
        }
      }
      // удаление записей
      if (_roomFacilitiesDel is not null && _roomFacilitiesDel.Any())
      {
        foreach (RoomFacilityDto item in _roomFacilitiesDel)
        {
          var response = await Mediator.Send(new DeleteRoomFacilityRequest(item.Id));
          _submitSuccessful = response.IsSuccess;
        }
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Ошибка: {ex.StackTrace}");
    }
  }
}

