// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250514052917_BookingEditStructure")]
    partial class BookingEditStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bookings", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cur_Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Cur_DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Cur_DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Cur_ID")
                        .HasColumnType("int");

                    b.Property<string>("Cur_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_NameMulti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_Name_Bel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_Name_BelMulti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_Name_Eng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_Name_EngMulti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cur_ParentID")
                        .HasColumnType("int");

                    b.Property<int>("Cur_Periodicity")
                        .HasColumnType("int");

                    b.Property<string>("Cur_QuotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_QuotName_Bel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_QuotName_Eng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cur_Scale")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Cur_ID");

                    b.ToTable("Currencies", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abbe09fc-5e77-414c-8940-e77e934de88f"),
                            Cur_Abbreviation = "RUB",
                            Cur_Code = "643",
                            Cur_DateEnd = new DateTime(2050, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cur_DateStart = new DateTime(2021, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cur_ID = 456,
                            Cur_Name = "Российский рубль",
                            Cur_NameMulti = "Российских рублей",
                            Cur_Name_Bel = "Расійскі рубель",
                            Cur_Name_BelMulti = "Расійскіх рублёў",
                            Cur_Name_Eng = "Russian Ruble",
                            Cur_Name_EngMulti = "Russian Rubles",
                            Cur_ParentID = 190,
                            Cur_Periodicity = 0,
                            Cur_QuotName = "100 Российских рублей",
                            Cur_QuotName_Bel = "100 Расійскіх рублёў",
                            Cur_QuotName_Eng = "100 Russian Rubles",
                            Cur_Scale = 100,
                            Name = "RUB"
                        },
                        new
                        {
                            Id = new Guid("f3ca1c7b-c275-4feb-9790-9a42efb878ee"),
                            Cur_Abbreviation = "USD",
                            Cur_Code = "840",
                            Cur_DateEnd = new DateTime(2021, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cur_DateStart = new DateTime(1991, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cur_ID = 145,
                            Cur_Name = "Доллар США",
                            Cur_NameMulti = "Долларов США",
                            Cur_Name_Bel = "Долар ЗША",
                            Cur_Name_BelMulti = "Долараў ЗША",
                            Cur_Name_Eng = "US Dollar",
                            Cur_Name_EngMulti = "US Dollars",
                            Cur_ParentID = 145,
                            Cur_Periodicity = 0,
                            Cur_QuotName = "1 Доллар США",
                            Cur_QuotName_Bel = "1 Долар ЗША",
                            Cur_QuotName_Eng = "1 US Dollar",
                            Cur_Scale = 1,
                            Name = "USD"
                        },
                        new
                        {
                            Id = new Guid("f3524eff-e305-4305-8ae3-2731ad415fe9"),
                            Cur_Abbreviation = "EUR",
                            Cur_Code = "978",
                            Cur_DateEnd = new DateTime(2050, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cur_DateStart = new DateTime(2021, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cur_ID = 451,
                            Cur_Name = "Евро",
                            Cur_NameMulti = "Евро",
                            Cur_Name_Bel = "Еўра",
                            Cur_Name_BelMulti = "Еўра",
                            Cur_Name_Eng = "Euro",
                            Cur_Name_EngMulti = "Euros",
                            Cur_ParentID = 19,
                            Cur_Periodicity = 0,
                            Cur_QuotName = "1 Евро",
                            Cur_QuotName_Bel = "1 Еўра",
                            Cur_QuotName_Eng = "1 Euro",
                            Cur_Scale = 1,
                            Name = "EUR"
                        });
                });

            modelBuilder.Entity("Domain.Models.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TypeFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("TypeFoodId");

                    b.ToTable("Foods", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e67a939-ef3d-4b29-ac4e-856d9db456be"),
                            HotelId = new Guid("b3c83220-d255-46d7-ac76-114ece1d925a"),
                            Name = "Завтрак",
                            TypeFoodId = new Guid("072fc618-8703-437f-9662-5ba97d0ab4f0")
                        },
                        new
                        {
                            Id = new Guid("d95e677e-9e2e-4534-bfe4-0c26d2602973"),
                            HotelId = new Guid("b3c83220-d255-46d7-ac76-114ece1d925a"),
                            Name = "Полупансион",
                            TypeFoodId = new Guid("4d53a1ed-9613-4406-8a31-a411c934e628")
                        },
                        new
                        {
                            Id = new Guid("0375cbb1-a4c1-42bf-b4ff-46a70d5ca365"),
                            HotelId = new Guid("f6a9207d-ad8b-4d5f-bea5-1cd2f87a0308"),
                            Name = "Завтрак, обед и ужин",
                            TypeFoodId = new Guid("b2d7509e-c5b3-4936-8deb-26e51052446f")
                        },
                        new
                        {
                            Id = new Guid("4321b0f8-fa4b-447f-91b0-89d119e02977"),
                            HotelId = new Guid("ffe1c64a-ad2b-443e-b5ac-2ce60eca6340"),
                            Name = "Всё включено",
                            TypeFoodId = new Guid("ceb0cba6-80dd-43b0-a9a3-3b9a4165f782")
                        },
                        new
                        {
                            Id = new Guid("7dbfc4df-a227-4ddb-87c0-011a057b4403"),
                            HotelId = new Guid("f6a9207d-ad8b-4d5f-bea5-1cd2f87a0308"),
                            Name = "Завтрак полноценный",
                            TypeFoodId = new Guid("e0a5a158-5ef8-414c-896a-49fdf04dc7a4")
                        },
                        new
                        {
                            Id = new Guid("00f7e7f9-387c-47f3-a728-cf91782f6ee3"),
                            HotelId = new Guid("ffe1c64a-ad2b-443e-b5ac-2ce60eca6340"),
                            Name = "Без питания",
                            TypeFoodId = new Guid("c9c6eb97-1d58-45d8-879a-9b2cf6c30cbd")
                        });
                });

            modelBuilder.Entity("Domain.Models.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatronymicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Guests", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Arrival")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hotels", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3c83220-d255-46d7-ac76-114ece1d925a"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla volutpat orci at augue ultricies fermentum. Ut massa lectus, dignissim sed molestie ut, viverra vel diam. Fusce at iaculis magna. Suspendisse vel est et est luctus ornare venenatis ut neque. Pellentesque varius lacus sed arcu pellentesque, a porttitor velit gravida. Nunc nunc lectus, rhoncus consectetur metus eget, fermentum laoreet mauris. Cras ac gravida ante. Ut in ante ex. Proin tristique a ligula vel pharetra. Vestibulum blandit nisl dui, in pulvinar metus mollis pharetra. Duis cursus porttitor libero, quis lacinia velit. Curabitur tincidunt laoreet mi, eu maximus nibh vestibulum sed. Phasellus orci.",
                            Location = "Durbach, Germany",
                            MainPhoto = "B3C83220-D255-46D7-AC76-114ECE1D925A.jpg",
                            Name = "Hotel, Singapore, Fullerton bay",
                            Rating = 4.9000000000000004,
                            Star = 3
                        },
                        new
                        {
                            Id = new Guid("f6a9207d-ad8b-4d5f-bea5-1cd2f87a0308"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus a semper lacus. Vestibulum vehicula elementum auctor. Vestibulum malesuada, nibh a pretium ullamcorper, tortor nisi tincidunt ante, sed gravida purus mi in ligula. In malesuada ligula vitae risus iaculis, et sollicitudin lorem ornare. Nullam nec ullamcorper est. Donec efficitur et ipsum auctor semper. In id eros risus. Suspendisse quis massa convallis, suscipit eros eget, ullamcorper metus. Phasellus laoreet nulla quam, vel porttitor diam efficitur vitae. Etiam sollicitudin urna vel auctor accumsan. Suspendisse commodo pulvinar mauris, quis viverra lectus hendrerit dictum. In sed lorem tempus ipsum rutrum suscipit vitae sed mauris. Nunc.",
                            Location = "Nottingham, UK",
                            MainPhoto = "F6A9207D-AD8B-4D5F-BEA5-1CD2F87A0308.jpg",
                            Name = "Hotel, Nature, Switzerland",
                            Rating = 2.3999999999999999,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("ffe1c64a-ad2b-443e-b5ac-2ce60eca6340"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut imperdiet ex ac euismod pulvinar. Cras lorem nulla, posuere sed semper sed, scelerisque non nulla. Sed mi lorem, condimentum nec magna ac, ultricies lobortis ante. Integer tincidunt, metus eget mattis hendrerit, nibh metus sagittis diam, sed imperdiet metus nisi ac magna. Pellentesque iaculis mi purus, a porta tortor sodales consequat. Pellentesque vel mattis ligula. Fusce ac massa id ex rutrum eleifend. Nunc porta tortor dictum, ornare metus quis, laoreet ante. Nullam ullamcorper magna eget eleifend consequat. In nulla ex, iaculis vestibulum eros ac, vestibulum euismod arcu. Nullam sollicitudin at neque et.",
                            Location = "Furna, Switzerland",
                            MainPhoto = "FFE1C64A-AD2B-443E-B5AC-2CE60ECA6340.jpg",
                            Name = "Lanzarote, Hotel, Heaven",
                            Rating = 4.7000000000000002,
                            Star = 3
                        },
                        new
                        {
                            Id = new Guid("2cedea9f-912d-48c7-9125-3c11769f71a7"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut laoreet, justo ut egestas pulvinar, est dui elementum neque, ac elementum lectus tellus in libero. Cras ullamcorper tellus id velit finibus, at rutrum odio convallis. Donec gravida nec mauris eget iaculis. Praesent faucibus ante fringilla, ullamcorper enim sit amet, suscipit leo. Sed libero erat, facilisis vel nunc et, venenatis volutpat quam. Integer sit amet lobortis risus, ut hendrerit orci. Vivamus pulvinar lectus dui, a dictum odio eleifend vitae. Pellentesque gravida risus eu ipsum efficitur consectetur. Nulla lectus leo, pharetra vel ante ut, mollis pharetra arcu. Morbi vitae metus ante. Integer lacinia.",
                            Location = "Gearstones, UK",
                            MainPhoto = "2CEDEA9F-912D-48C7-9125-3C11769F71A7.jpg",
                            Name = "Hotel, Building, House, Shops",
                            Rating = 4.7999999999999998,
                            Star = 5
                        },
                        new
                        {
                            Id = new Guid("6c294357-66e3-49b1-ab63-42173553e89c"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer facilisis magna eget sem feugiat, non pulvinar dui interdum. Proin quis tincidunt ex. Pellentesque dictum nibh dolor, cursus porta magna sodales a. Morbi vitae tortor nisi. Nullam molestie dui tempus, lobortis dolor sit amet, hendrerit libero. Quisque sed massa id lacus ornare faucibus eget facilisis mi. Donec interdum bibendum leo nec facilisis. In semper nec eros id tincidunt. Nunc sed sagittis justo. Ut massa ligula, posuere sed iaculis sit amet, laoreet ut ipsum. Nulla facilisi. Vestibulum iaculis risus nulla. Nunc congue elit et erat blandit vulputate. Praesent vulputate tortor at augue.",
                            Location = "Ockle, Scotland",
                            MainPhoto = "",
                            Name = "Hotel, Winter, Season",
                            Rating = 3.6000000000000001,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("c48cbbe7-6a94-4480-9c60-48b54af81545"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Singapore skyline with urban buildings over water",
                            Location = "Ocluder, Singopour",
                            MainPhoto = "",
                            Name = "Marina bay sands, Singapore",
                            Rating = 4.2000000000000002,
                            Star = 5
                        },
                        new
                        {
                            Id = new Guid("e0c80aaf-2224-40d5-8d54-66bf4fbbfcd8"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Lorem ipsum dolor sit amet sed diam sadipscing sit stet amet invidunt nibh autem voluptua justo tempor tation sed. Consetetur labore accusam ut nonumy justo dolore kasd. Duis odio labore dolore stet. Kasd vel dolor feugait illum accusam veniam dolore dignissim labore. Ut sed elitr elitr amet gubergren ipsum tempor sed duo erat justo no nibh id voluptua ut.",
                            Location = "Madrid, Espane",
                            MainPhoto = "E0C80AAF-2224-40D5-8D54-66BF4FBBFCD8.jpg",
                            Name = "Hotel, High, Stone image",
                            Rating = 4.0999999999999996,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("95175bfc-af50-4588-9373-68ee30e88f75"),
                            Arrival = "14:00",
                            Departure = "12:00",
                            Description = "Lorem ipsum dolor sit amet gubergren ipsum vulputate invidunt vel sit dolor liber. Elitr ut et vulputate est. Justo ut nonummy est. Dolor ipsum duis rebum lorem laoreet autem elitr vero gubergren sea est clita wisi et dolore. Ut duo lorem ipsum takimata facilisis est sanctus sea at accusam sanctus clita labore et dolor. Eos illum delenit et ipsum sed amet. Gubergren accusam consetetur.",
                            Location = "Paris, France",
                            MainPhoto = "",
                            Name = "Hotel, Invalidendom",
                            Rating = 4.9000000000000004,
                            Star = 5
                        });
                });

            modelBuilder.Entity("Domain.Models.HotelFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelFacilities", "dbo");
                });

            modelBuilder.Entity("Domain.Models.HotelPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelPhotos", "dbo");
                });

            modelBuilder.Entity("Domain.Models.HotelUsefulInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId")
                        .IsUnique();

                    b.ToTable("HotelUsefulInfos", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Locations", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("DayPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Prices", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Rate", b =>
                {
                    b.Property<int>("Cur_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cur_ID"));

                    b.Property<string>("Cur_Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cur_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cur_OfficialRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Cur_Scale")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Cur_ID");

                    b.ToTable("Rates", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeReview")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Reviews", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PeopleNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Square")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b09f078-169f-4ae8-aaa1-5b8a2e1c896b"),
                            Description = "Takimata consectetuer lorem facilisis ipsum nibh sit accusam aliquyam justo clita",
                            HotelId = new Guid("b3c83220-d255-46d7-ac76-114ece1d925a"),
                            PeopleNumber = 2,
                            RoomTypeId = new Guid("0282be52-3816-401e-af3f-074be089d921"),
                            Square = 40.0
                        },
                        new
                        {
                            Id = new Guid("e12d0ba1-7ac8-4a19-b241-31705c2a3500"),
                            Description = "Elitr sed enim stet dolore consectetuer consetetur et facer diam eirmod dolores tempor ea sit.",
                            HotelId = new Guid("b3c83220-d255-46d7-ac76-114ece1d925a"),
                            PeopleNumber = 4,
                            RoomTypeId = new Guid("a19b9bbe-a941-4b3e-bb2d-07e75ed1850a"),
                            Square = 52.0
                        },
                        new
                        {
                            Id = new Guid("1088f86a-f6f2-4cc8-88fa-1d0beb5e95d8"),
                            Description = "Nibh vero illum sit. Dolor consetetur tempor amet sea lorem consequat diam dolor ea accusam no te at ea clita diam.",
                            HotelId = new Guid("b3c83220-d255-46d7-ac76-114ece1d925a"),
                            PeopleNumber = 2,
                            RoomTypeId = new Guid("4776d7ce-cc8d-4c86-8b9d-40650651df33"),
                            Square = 34.0
                        },
                        new
                        {
                            Id = new Guid("9d551953-1b52-4cb1-ad90-31c8653955fa"),
                            Description = "Zzril tation clita stet.",
                            HotelId = new Guid("f6a9207d-ad8b-4d5f-bea5-1cd2f87a0308"),
                            PeopleNumber = 3,
                            RoomTypeId = new Guid("072fc618-8703-437f-9662-5ba97d0ab4f0"),
                            Square = 38.0
                        },
                        new
                        {
                            Id = new Guid("dca48ffc-c572-4ca5-8217-7a7d370fed2a"),
                            Description = "Accumsan amet nonumy nonumy et amet euismod sed ipsum invidunt tincidunt ad. Ea dolor justo diam. Sea at labore duo iriure et ut ullamcorper in dignissim sit sit ipsum.",
                            HotelId = new Guid("f6a9207d-ad8b-4d5f-bea5-1cd2f87a0308"),
                            PeopleNumber = 3,
                            RoomTypeId = new Guid("68188476-48c6-48be-b4cc-f8b63b4f0b08"),
                            Square = 40.5
                        });
                });

            modelBuilder.Entity("Domain.Models.RoomFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomFacilities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c17ade5-2349-43fe-a9d1-d10aed6ddebd"),
                            Name = "Цифровое ТВ",
                            RoomId = new Guid("6b09f078-169f-4ae8-aaa1-5b8a2e1c896b")
                        },
                        new
                        {
                            Id = new Guid("6e69e113-eb98-4094-b417-83d61a9ab4eb"),
                            Name = "Мини-холодильник",
                            RoomId = new Guid("6b09f078-169f-4ae8-aaa1-5b8a2e1c896b")
                        },
                        new
                        {
                            Id = new Guid("d3fb6a18-f736-4cb5-bf64-69c36b3d489c"),
                            Name = "Wi-Fi",
                            RoomId = new Guid("6b09f078-169f-4ae8-aaa1-5b8a2e1c896b")
                        },
                        new
                        {
                            Id = new Guid("13b17dab-7ed0-40d9-93d5-b020eea0aad9"),
                            Name = "Ванна",
                            RoomId = new Guid("e12d0ba1-7ac8-4a19-b241-31705c2a3500")
                        },
                        new
                        {
                            Id = new Guid("427ba46a-07e6-4da2-afed-c1760f02a636"),
                            Name = "Фен",
                            RoomId = new Guid("e12d0ba1-7ac8-4a19-b241-31705c2a3500")
                        },
                        new
                        {
                            Id = new Guid("a774e890-3726-4e5b-8071-50e01f27b7b9"),
                            Name = "Цифровое ТВ",
                            RoomId = new Guid("e12d0ba1-7ac8-4a19-b241-31705c2a3500")
                        },
                        new
                        {
                            Id = new Guid("573716d8-e318-4ba0-957c-2a1a0be4af30"),
                            Name = "Wi-Fi",
                            RoomId = new Guid("e12d0ba1-7ac8-4a19-b241-31705c2a3500")
                        });
                });

            modelBuilder.Entity("Domain.Models.RoomPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPhotos", "dbo");
                });

            modelBuilder.Entity("Domain.Models.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ca90fe7-2be3-4d2b-893c-329e78f1795b"),
                            Name = "Номер Стандарт"
                        },
                        new
                        {
                            Id = new Guid("68188476-48c6-48be-b4cc-f8b63b4f0b08"),
                            Name = "Номер Делюкс"
                        },
                        new
                        {
                            Id = new Guid("109d81b2-58b8-4f48-aa96-469b1e9dd445"),
                            Name = "Двухкомнатный Люкс"
                        },
                        new
                        {
                            Id = new Guid("91ed5eb9-d369-4788-bcdc-7bbaf1813a2a"),
                            Name = "Номер «Восточный»"
                        },
                        new
                        {
                            Id = new Guid("32de15de-509d-46ff-8c5a-baf5cdc34405"),
                            Name = "Президентский люкс"
                        },
                        new
                        {
                            Id = new Guid("4f9a65f2-de87-46b4-9860-e7c0262c92d9"),
                            Name = "Улучшенные двухкомнатные апартаменты"
                        },
                        new
                        {
                            Id = new Guid("5046fcc4-fbef-49f1-b2f5-b5c64e380ea0"),
                            Name = "Двухкомнатные апартаменты с одной спальней"
                        },
                        new
                        {
                            Id = new Guid("0282be52-3816-401e-af3f-074be089d921"),
                            Name = "Студия"
                        },
                        new
                        {
                            Id = new Guid("0f4ef0eb-7f4d-4a8b-94c6-6d9f7e0b8c0d"),
                            Name = "Двухкомнатный Полулюкс"
                        },
                        new
                        {
                            Id = new Guid("805175af-552e-4b6c-b3fd-5a49c3a226d8"),
                            Name = "Трехкомнатные апартаменты с одной спальней"
                        },
                        new
                        {
                            Id = new Guid("ebf1c674-191c-4d27-ab38-aad7f7360c17"),
                            Name = "Стандарт 3-х местный"
                        },
                        new
                        {
                            Id = new Guid("5afb6d3d-0ce3-4c34-a988-35187ffdf877"),
                            Name = "Люкс двухкомнатный 8-ми местный"
                        },
                        new
                        {
                            Id = new Guid("072fc618-8703-437f-9662-5ba97d0ab4f0"),
                            Name = "Полулюкс"
                        },
                        new
                        {
                            Id = new Guid("4776d7ce-cc8d-4c86-8b9d-40650651df33"),
                            Name = "Стандарт Бизнес"
                        },
                        new
                        {
                            Id = new Guid("de0f70a9-b924-47ed-a599-295a4e8b4889"),
                            Name = "Стандарт Бизнес (четырехместный )"
                        },
                        new
                        {
                            Id = new Guid("a19b9bbe-a941-4b3e-bb2d-07e75ed1850a"),
                            Name = "Люкс Гранд Премиум"
                        });
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Services", "dbo");
                });

            modelBuilder.Entity("Domain.Models.TypeFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeFoods", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("072fc618-8703-437f-9662-5ba97d0ab4f0"),
                            Name = "Завтрак"
                        },
                        new
                        {
                            Id = new Guid("4d53a1ed-9613-4406-8a31-a411c934e628"),
                            Name = "Полупансион"
                        },
                        new
                        {
                            Id = new Guid("b2d7509e-c5b3-4936-8deb-26e51052446f"),
                            Name = "Завтрак, обед и ужин"
                        },
                        new
                        {
                            Id = new Guid("ceb0cba6-80dd-43b0-a9a3-3b9a4165f782"),
                            Name = "Всё включено"
                        },
                        new
                        {
                            Id = new Guid("e0a5a158-5ef8-414c-896a-49fdf04dc7a4"),
                            Name = "Завтрак полноценный"
                        },
                        new
                        {
                            Id = new Guid("c9c6eb97-1d58-45d8-879a-9b2cf6c30cbd"),
                            Name = "Без питания"
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("Domain.Models.Food", b =>
                {
                    b.HasOne("Domain.Models.Hotel", "Hotel")
                        .WithMany("Foods")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.TypeFood", "TypeFood")
                        .WithMany("Foods")
                        .HasForeignKey("TypeFoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("TypeFood");
                });

            modelBuilder.Entity("Domain.Models.Guest", b =>
                {
                    b.HasOne("Domain.Models.Booking", "Booking")
                        .WithMany("Guests")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Models.HotelFacility", b =>
                {
                    b.HasOne("Domain.Models.Hotel", "Hotel")
                        .WithMany("HotelFacilities")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Models.HotelPhoto", b =>
                {
                    b.HasOne("Domain.Models.Hotel", "Hotel")
                        .WithMany("HotelPhotos")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Models.HotelUsefulInfo", b =>
                {
                    b.HasOne("Domain.Models.Hotel", "Hotel")
                        .WithOne("HotelUsefulInfo")
                        .HasForeignKey("Domain.Models.HotelUsefulInfo", "HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.HasOne("Domain.Models.Hotel", "Hotel")
                        .WithMany("Locations")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Models.Price", b =>
                {
                    b.HasOne("Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Currency", null)
                        .WithMany("Prices")
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("Prices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.RoomType", null)
                        .WithMany("Prices")
                        .HasForeignKey("RoomTypeId");

                    b.Navigation("Currency");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Review", b =>
                {
                    b.HasOne("Domain.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.HasOne("Domain.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Domain.Models.RoomFacility", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.RoomPhoto", b =>
                {
                    b.HasOne("Domain.Models.Room", "Room")
                        .WithMany("RoomPhotos")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Service", b =>
                {
                    b.HasOne("Domain.Models.Booking", "Booking")
                        .WithMany("Services")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Models.Currency", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domain.Models.Hotel", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("HotelFacilities");

                    b.Navigation("HotelPhotos");

                    b.Navigation("HotelUsefulInfo");

                    b.Navigation("Locations");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Models.Room", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("RoomFacilities");

                    b.Navigation("RoomPhotos");
                });

            modelBuilder.Entity("Domain.Models.RoomType", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Models.TypeFood", b =>
                {
                    b.Navigation("Foods");
                });
#pragma warning restore 612, 618
        }
    }
}
